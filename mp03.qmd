---
title: "Creating the Ultimate Playlist"
author: "Giulio Orazzo"
date: last-modified
format :
  html: 
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: right
    toc-title: "On this page"
    css: styles.css
execute:
  output: false
draft: false
---
## Table of Contents

1.  [Introduction](#introduction)
2.  [Data Acquisition](#data-import)
3.  [Initial Exploration](#initial-exploration)
4.  [Identifying Characteristics of Popular Songs](#Identifying-Characteristics-of-Popular-Songs)
5.  [Building a Playlist](#Building-a-Playlist)
6.  [Finding Related Songs](#Finding-Related-Songs)
7.  [Final Playlist](#final-playlist)


## üéß Pulse & Echo  

### The Ultimate Playlist

*Pulse & Echo* is a 12-track playlist designed to guide the listener through a dynamic musical journey. The sequence weaves through smooth transitions, emotional drops, and uplifting peaks, offering both familiar favorites and new sonic discoveries. With selections spanning synthwave, pop, indie, and Latin crossover, this playlist balances mood, tempo, and energy for moments of reflection, movement, or pure vibe.

---

## üéØ Design Principles

### üî¨ Quantitative Harmony  
Songs were selected based on closeness in **tempo**, **key**, and compatible values for **acousticness**, **danceability**, **energy**, and **valence**. All features were compared as a percentage deviation from the average anchor song values, ensuring smooth auditory transitions.

### üìà Emotional Trajectory  
The playlist follows a **‚Äúrise‚Äìfall‚Äìrise‚Äù** pattern. It begins upbeat, dips into more introspective and atmospheric tracks midway, and picks up again with energetic closers‚Äîcreating an arc that feels cinematic and emotionally resonant.

### üßÆ Data-Driven Selection  
Tracks were selected using a multi-step filtering process based on five key heuristics:

1. **Co-occurrence** with anchor tracks in user playlists  
2. **Same artist** connections  
3. **Songs in the same year** with similar Spotify features  
4. **Key and tempo compatibility**  
5. **Feature similarity** within ¬±25% of anchor song averages  


# Introduction {#introduction}

In this mini-project, we dive into the world of music analytics to craft The Ultimate Playlist. Using real Spotify data, we analyze both song popularity and audio features to uncover the key elements that make a song stand out. By exploring patterns in user behavior and musical traits, we aim to build a playlist that captures the essence of what listeners love most. Inspired by the legendary ‚ÄúAll Rise‚Äù playlist, this project challenges you to define your own version of musical perfection.

# Data Acquisition {#data-import}

## Song Characteristics

```{r}
library(stringr)
library(dplyr)
library(knitr)
library(scales)
library(ggplot2)
library(gridExtra)
library(kableExtra)

load_songs <- function() {
  library(readr)
  library(here)
  
  # Define the directory and file path
  dir_path <- here("data", "mp03")
  file_name <- "songs.csv"
  file_path <- file.path(dir_path, file_name) 
  
  # Create directory if it doesn't exist
  if (!dir.exists(dir_path)) {
    dir.create(dir_path, recursive = TRUE)
  }
  
  # Download file only if it doesn't exist
  if (!file.exists(file_path)) {
    url <- "https://raw.githubusercontent.com/gabminamedez/spotify-data/refs/heads/master/data.csv"
    download.file(url, destfile = file_path, method = "auto")
  }
  
  
  library(readr)
  songs_df <- read_csv(file_path, show_col_types = FALSE)
  
  # Optional: clean column names if necessary
  # library(janitor)
  # songs_df <- clean_names(songs_df)
  
  return(songs_df)
}
songs_df <- load_songs()
```
This dataset contains audio features and metadata for a wide range of tracks. It includes details such as song name, artist(s), album, release year, and attributes like danceability, energy, and popularity. The data was downloaded from a GitHub mirror and required some cleaning‚Äîespecially the artists column, which lists multiple artists in a non-standard format. The cleaned dataset was transformed into a tidy structure, with each row representing one song-artist combination.

```{r}
library(tidyr)
library(stringr)
clean_artist_string <- function(x){
    str_replace_all(x, "\\['", "") |> 
        str_replace_all("'\\]", "") |>
        str_replace_all(" '", "")
}
songs_df <- songs_df |> 
  separate_longer_delim(artists, ",") |>
  mutate(artist = clean_artist_string(artists)) |>
  select(-artists)
```

## Playlist Dataset

This dataset is a large collection of Spotify user-generated playlists, provided as multiple JSON files. A custom function was written to responsibly download and parse the files only if not already available locally. Since the raw structure is nested and complex, the data was reshaped into a flat, rectangular format. Each row represents a single track within a playlist, including attributes like playlist name, track name, artist, album, and position within the playlist.

```{r}

load_playlists <- function(n = 10) {
  base_url <- "https://raw.githubusercontent.com/DevinOgrady/spotify_million_playlist_dataset/main/data1/"
  dir_path <- "data/mp03/playlists"
  if (!dir.exists(dir_path)) dir.create(dir_path, recursive = TRUE)

  playlists <- list()

  for (i in 0:(n - 1)) {
    start <- i * 1000
    end <- start + 999
    file_name <- sprintf("mpd.slice.%d-%d.json", start, end)
    file_url <- paste0(base_url, file_name)
    file_path <- file.path(dir_path, file_name)

    if (!file.exists(file_path)) {
      message("Downloading: ", file_name)
      result <- tryCatch({
        download.file(file_url, file_path, mode = "wb", quiet = TRUE)
        TRUE
      }, error = function(e) {
        message("Failed to download ", file_name)
        FALSE
      })

      if (!result) next
    }

    if (file.exists(file_path)) {
      json_data <- tryCatch({
        jsonlite::fromJSON(file_path)
      }, error = function(e) {
        message("Failed to parse ", file_name)
        NULL
      })

      if (!is.null(json_data)) {
        playlists[[length(playlists) + 1]] <- json_data$playlists
      }
    }
  }

  return(playlists)
}

if (file.exists("data/processed_playlists.rds")) {
  playlists <- readRDS("data/processed_playlists.rds")
} else {
  playlists <- load_playlists(n = 10)
  saveRDS(playlists, "data/processed_playlists.rds")
}


playlists <- load_playlists(n = 10)  


```


```{r}
library(dplyr)
library(tidyr)
library(purrr)
library(stringr)

# Provided function to clean Spotify URIs
strip_spotify_prefix <- function(x){
  str_extract(x, ".*:.*:(.*)", group = 1)
}

# building the tidy dataframe
rectangular_tracks_df <- playlists[[1]] |>
  mutate(playlist_id = pid,
         playlist_name = name,
         playlist_followers = num_followers) |>
  select(playlist_id, playlist_name, playlist_followers, tracks) |>
  unnest(tracks) |>
  mutate(
    artist_id = strip_spotify_prefix(artist_uri),
    track_id = strip_spotify_prefix(track_uri),
    album_id = strip_spotify_prefix(album_uri),
    playlist_position = row_number()
  ) |>
  rename(
    artist_name = artist_name,
    track_name = track_name,
    album_name = album_name,
    duration = duration_ms
  ) |>
  select(
    playlist_name,
    playlist_id,
    playlist_position,
    playlist_followers,
    artist_name,
    artist_id,
    track_name,
    track_id,
    album_name,
    album_id,
    duration
  )

```
# Initial Exploration {#initial-exploration}

#### How many distinct tracks and artists are represented in the playlist data?

```{r}
dist_artist <- rectangular_tracks_df|> summarise(
  distinct_count = n_distinct(artist_name)
)

dist_track <- rectangular_tracks_df|> summarise(
  distinct_count = n_distinct(track_name)
)
```

- There are `{r} dist_track$distinct_count` tracks and `{r} dist_artist$distinct_count` artists in the playlist dataset.

#### What are the 5 most popular tracks in the playlist data?

```{r}
most_pop_tracks <- rectangular_tracks_df|>
  group_by(track_name)|>
  summarize(
    artist_name = first(artist_name),
    album_name = first(album_name),
    track_id = first(track_id),
    count = n())|>
  arrange(desc(count))

```

```{r , echo=FALSE , output = TRUE}

kable(most_pop_tracks|> select(-track_id)|>
        rename( "Track Name" = track_name,
                "Artist" = artist_name,
                "Album" = album_name,
                "# of Appereance in Playlists" = count)|>
        head(5)
)

```
The table shows the 5 most popular songs, and how many time they appeared in different playlists.


#### What is the most popular track in the playlist data that does not have a corresponding entry in the song characteristics data?

```{r}
songs_df<- songs_df|>
  rename("track_id" = id)

# joining the 2 datasets by the track ID 
joined_data <- songs_df|>
  left_join(rectangular_tracks_df, by =  "track_id")

count_of_NA <- joined_data|>
  summarize(na_count = sum(is.na(playlist_name)))


# Find tracks in playlists_data not present in songs
unmatched_tracks <- rectangular_tracks_df |>
  anti_join(songs_df, by = "track_id")

# Count and find the most frequent unmatched track
most_popular_unmatched <- unmatched_tracks |>
  count(track_name, artist_name, sort = TRUE) |>
  slice_max(n, n = 1)

```
```{r, echo=FALSE , output = TRUE}
#Display table with styling
most_popular_unmatched |>
  rename("Track Name" = track_name,"Artist Name" = artist_name, "Play Count" = n)|>
  kable(caption = "<b><span style='font-size:18px;'>Most Popular Unmatched Song</span></b>") |>
  kable_styling(bootstrap_options = c("striped", "condensed"), full_width = FALSE, position = "center")
```

#### According to the song characteristics data, what is the most ‚Äúdanceable‚Äù track? How often does it appear in a playlist?

```{r}
#get the most danceable song
most_danceable<- joined_data|>
  group_by(name)|>
  arrange(desc(danceability))|>
  head(5)
# counting number of appearences
dance_count<- rectangular_tracks_df|>
  filter(track_id == most_danceable$track_id[1])|>
  summarize(appereances = n())
```

- The most **danceable** track in the dataset is *`{r} most_danceable$name[1]`* by *`{r} most_danceable$artist_name[1]`*, which appears `{r} dance_count$appereances` time in the playlist *"`{r} most_danceable$playlist_name[1]`"*

#### Which playlist has the longest average track length?

```{r}
rectangular_tracks_df <- rectangular_tracks_df|>
  group_by(playlist_name)|>
  mutate(avg_duration = mean(duration))|>
  ungroup()|>
  mutate(avg_duration = avg_duration / 1000,  # converting ms to seconds
         avg_duration_min = avg_duration / 60)  

long_avg <- rectangular_tracks_df|>
  slice_max(avg_duration)
```

- **"`{r} long_avg$playlist_name[1]`"** is the playlist with **longest average track lenght**, with an average duration of `{r} round(long_avg$avg_duration[1])` seconds , or about `{r} round(long_avg$avg_duration_min[1])` minutes for each song.

#### What is the most popular playlist on Spotify?

```{r}
most_pop_play <- rectangular_tracks_df|>
  slice_max(playlist_followers)
```

- The **most popular playlist** on Spotify is **`{r} most_pop_play$playlist_name[1]`** with `{r} most_pop_play$playlist_followers[1]` followers.


# Identifying Characteristics of Popular Songs {#Identifying-Characteristics-of-Popular-Songs}

## Combining the Datasets

To analyze both song characteristics and playlist behavior, we use an `inner_join` to merge the playlist and song datasets based on track IDs. 

This approach ensures that only songs appearing in both datasets are included in our analysis. Although this results in the loss of some playlist data (since not every track has corresponding song characteristics), it allows for a cleaner dataset with complete information. Given the differences in timing and structure between the two data exports, this is the most practical solution.


```{r}

# joining the 2 datasets by the track ID  using inner_join
inner_joined_data <- songs_df|>
  inner_join(rectangular_tracks_df, by =  "track_id")

```
## Defining Popularity

```{r}
# defining stats using percentiles
popularity_stats <- inner_joined_data |> 
  summarize(
    min_pop = min(popularity),
    max_pop = max(popularity),
    mean_pop = mean(popularity),
    median_pop = median(popularity),
    p75 = quantile(popularity, 0.75),
    p90 = quantile(popularity, 0.90)
  )
 popularity_stats$mean_pop <- round(popularity_stats$mean_pop, 2)
```

To explore how song popularity relates to playlist appearances, we examined the distribution of the popularity variable and set a threshold to define what counts as a **"popular"** songs. 

```{r, echo=FALSE , output = TRUE}

kable(popularity_stats|>
        rename("Min" = min_pop,
               "Max" = max_pop,
               "Average"= mean_pop,
               "Median" = median_pop,
               "75 Percentile" = p75,
               "90 Percentile" = p90))

```

The table above shows the popularity statistics of all the tracks in the dataset. We decide to use the *75 Percentile* as a threshold  to define a **"Popular Song"**, and the *"90 Percentile"* as a threshold for **"Very Popular Songs"**. Any track with a **popularity index** above `{r} popularity_stats$p75` will be considered **Popular** , while any track with a **popularity index** above `{r} popularity_stats$p90` will be considered **Very Popular**.

## Is the popularity column correlated with the number of playlist appearances? If so, to what degree?

```{r}
# counting playilist appearances in the inner_jointed dataset
inner_joined_data <- inner_joined_data|>
  group_by(track_id)|>
  mutate( playlist_appereance = n())|>
  ungroup()

# getting the first occurence of each song
popular_songs <-inner_joined_data|>
  group_by(track_id)|>
  slice(1)|>
  arrange(desc(popularity))

```

### The table below show the **Top 5** most popular songs using **Popularity Index**

```{r, echo=FALSE , output = TRUE}
top_5_pop <- popular_songs|>ungroup()|>
  slice_head(n = 5)
kable(
  top_5_pop |>
    select(Song = name, 
           Artist = artist, 
           `Album Name` = album_name,
           `Popularity Index` = popularity,
           `# of Playlist Appearence` = playlist_appereance)
)

```

### The table below show the **Top 5** most popular songs by **Playlist Appereances**

```{r, echo=FALSE , output = TRUE}
kable(popular_songs|> arrange(desc(playlist_appereance))|>ungroup()|>
        slice_head(n = 5)|>
        select(Song = name, 
           Artist = artist, 
           `Album Name` = album_name,
           `Popularity Index` = popularity,
           `# of Playlist Appearence` = playlist_appereance)
        
)

```

```{r, fig.width=10, fig.height=6, output = TRUE}
popular_songs|> ggplot(
  aes(x = popularity , 
      y = playlist_appereance)) +
  geom_point(color = "darkblue", size = 2) +
  labs(
    title = "Popularity VS Playlist Appereance",
    x = "Popularity",
    y = "Playlist Appereance"
  ) +
  theme_bw() +
  theme(
    axis.title.x = element_text(margin = margin(t = 15)),
    axis.title.y = element_text(margin = margin(r = 15)),
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 16),
    plot.title = element_text(size = 20, face = "bold")
  ) 

```

The scatterplot shows a wide dispersion of points without a clear linear pattern, indicating a **weak or no strong correlation** between the **popularity index** and the number of **playlist appearances**. While a few popular songs do appear frequently in playlists, many others have high popularity but low appearances, or vice versa. This suggests that playlist frequency alone doesn't strongly predict popularity.

```{r}
correlation <-cor(popular_songs$popularity, popular_songs$playlist_appereance, use = "complete.obs")
```

Upon further investigation, we found that the correlation between the 2 variable is `{r} round(correlation, 2)`, which indicates weak correlation, and validates our original thesis.

## In what year were the most popular songs released?

```{r}
pop_song_years <- inner_joined_data |>
  group_by(year) |>
  summarize(avg_pop = mean(popularity, na.rm = TRUE)) |>
  arrange(desc(avg_pop))
  
```


```{r,  fig.width=10, fig.height=7, output = TRUE}

library(patchwork)

# Plot
pop_plot <- ggplot(pop_song_years, aes(x = year, y = avg_pop)) +
  geom_line(color = "steelblue", size = 1.2) +
  geom_point(color = "darkorange", size = 2) +
  labs(title = "Average Popularity of Songs by Year",
       x = "Year", y = "Average Popularity") +
  theme_bw(base_size = 14)

# Table 
top_years_table <- pop_song_years |> 
  slice_max(avg_pop, n = 5) |> 
  select(Year = year, `Avg Popularity` = avg_pop)

top_years_table$`Avg Popularity`<- round(top_years_table$`Avg Popularity`, 2)

table_grob <- gridExtra::tableGrob(top_years_table)

# Combine side-by-side
pop_plot + patchwork::wrap_elements(table_grob)+ 
  plot_layout(widths = c(3, 1))  
```

The graph illustrates the average popularity of songs over time, showing a general upward trend‚Äîsuggesting that songs from more recent years tend to be more popular.

Next to the graph, the table displays the **Top 5 Most Popular Year** in which songs were released. 


## In what year did danceability peak?

```{r}
# calculating average of dancebility for each year
danceability <- inner_joined_data|>
  group_by(year)|>
  mutate(avg_danceability = mean(danceability))|>
  arrange(desc(avg_danceability))


```

In **`{r} danceability$year[1]`** we see the higher danceability score, with an index of **`{r} round(danceability$avg_danceability[1], 2)`**. 

```{r, fig.width=10, fig.height=6, output = TRUE}
danceability|> ggplot(
  aes(x = year , 
      y = avg_danceability)) +
  geom_point(color = "darkorange", size = 3) +
  labs(
    title = "Linear Trend of Danceability Over Time",
    x = "Year",
    y = "Average Danceability"
  ) +
  theme_bw() +
  theme(
    axis.title.x = element_text(margin = margin(t = 15)),
    axis.title.y = element_text(margin = margin(r = 15)),
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 16),
    plot.title = element_text(size = 20, face = "bold")
  ) +
  geom_smooth(method = "lm", se = FALSE, color = "black")+
  scale_x_continuous(breaks = seq(min(danceability$year), max(danceability$year), by = 10)) 

ggsave("danceability_plot.png")
```
This plot visualizes the distribution of **danceability** of tracks across the years. Danceability measures how suitable a track is for dancing, and values range from 0 to 1. Higher values indicate that the track is more suitable for dancing. This plot illustrates an upward trend in danceability over the years, suggesting that more recent tracks tend to be increasingly suited for dancing.


## Which decade is most represented on user playlists? 

To find the **most represented decades** in the playlists, we group the playlist data by decade  and count how many times songs from each decade appear.

```{r}
# grouping by decades
inner_joined_data<- inner_joined_data|>
   mutate(decade = paste0((year %/% 10) * 10, "s"))


library(scales)
# sum of appereances in playlist by decade
repr_decades<- inner_joined_data|>
  group_by(decade)|>
  summarize(total_appearances = sum(playlist_appereance, na.rm = TRUE)) |> 
  arrange(desc(total_appearances))|>
  mutate(total_appearances = number(total_appearances, big.mark = ","))


```

```{r, echo=FALSE , output = TRUE}
kable(repr_decades|> 
        rename( "Decade" = decade,
                "Total Appearances in Playlists"= total_appearances)
)

```

## üéµ Graph Description ‚Äì Frequency of Musical Keys (Polar Plot):

This polar plot illustrates the **frequency of musical keys**, represented as numbers from **0 to 11**, where each number corresponds to a musical key (e.g., 0 = C, 1 = C‚ôØ/D‚ô≠, 2 = D, etc.). The circular layout reflects the **cyclical nature of musical keys**, akin to the **Circle of Fifths** in music theory.

Each bar‚Äôs height indicates how often that key appears among the songs in user playlists. This visualization helps identify which keys are most common, offering insights into musical trends and preferences. Despite using numeric values, the cyclical arrangement of keys remains intuitive in this format.



```{r, fig.width=10, fig.height= 8, output = TRUE}

# Calculate the frequency of each key
key_frequency <- inner_joined_data |>
  group_by(key) |>
  summarize(count = n()) |>
  arrange(desc(count))

# Create a polar plot
ggplot(key_frequency, aes(x = as.factor(key), y = count)) +
  geom_bar(stat = "identity", fill = "skyblue", color = "black") +
  coord_polar(start = 0) +
  theme_bw() +
  labs(title = "Frequency of Musical Keys Among Songs",
       x = "Musical Key",
       y = "Frequency") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text = element_text(size = 12),
        axis.title = element_text(size = 16),
        plot.title = element_text(size = 20, face = "bold"))
```

## Track Duration Stats


```{r}
#convert duration in minutes 
inner_joined_data <- inner_joined_data |> 
  mutate(duration_min = duration_ms / 60000)

# calculating mean and percentiles to see avg track length
length_info <- inner_joined_data |> 
  summarize( avg_length = mean(duration_min),
    median_length = median(duration_min),
    shortest = min(duration_min),
    longest = max(duration_min),
    p25 = quantile(duration_min, 0.25),
    p75 = quantile(duration_min, 0.75)
  )
length_info$avg_length <- round(length_info$avg_length, 2)
length_info$median_length <- round(length_info$median_length, 2)
length_info$shortest <- round(length_info$shortest, 2)
length_info$longest <- round(length_info$longest, 2)
length_info$p25 <- round(length_info$p25, 2)
length_info$p75 <- round(length_info$p75, 2)

```

The table below summarizes key statistics about the distribution of track lengths (in minutes) among the songs included in user playlists. It includes the **average** and **median** track length, as well as the **shortest** and **longest** tracks in the dataset. Additionally, the table shows the **25th percentile** and **75th percentile**  values, which define the **interquartile range (IQR)** ‚Äî the range that contains the middle 50% of all track lengths.

We can see from the table that most tracks tend to be the range `{r} length_info$p25` and `{r} length_info$p75` minutes, suggesting a preference for mid-length songs.


```{r, echo=FALSE , output = TRUE}
kable(length_info|> 
        rename( "Average" = avg_length,
                "Median"= median_length,
                "Shortest" = shortest,
                "Longest" = longest,
                "25 Percentile" = p25,
                "75 Percentile" = p75)
)

```


```{r, fig.width=10, fig.height= 7, output = TRUE}

ggplot(inner_joined_data, aes(x = duration_min)) +
  geom_histogram(binwidth = 0.5, fill = "darkorange", color = "white") +
  labs(
    title = "Distribution of Track Lengths in User Playlists",
    x = "Track Length (minutes)",
    y = "Number of Songs"
  ) +
  theme_bw()+
  theme(axis.text = element_text(size = 12),
        axis.title = element_text(size = 16),
        plot.title = element_text(size = 20, face = "bold"))+
  scale_x_continuous(limits = c(0, 10, 2))
  
```

# üéß Building a Playlist {#Building-a-Playlist}

My two **anchor tracks** are *"Look at Me"* by *XXXTentacion* and *"goosebumps"* by *Travis Scott*. To find songs that work well with my anchor tracks, I first identified all playlists that contain either of the two songs I selected. Then, I looked at what other songs appear on those same playlists. This method helps surface tracks that users often group with one of my anchors, suggesting they share similar vibes, styles, or transitions‚Äîmaking them strong candidates for inclusion in a cohesive playlist.

```{r}

# defining popularity level using the percentiles
inner_joined_data<- inner_joined_data|>
  mutate(
    popularity_level = case_when(
      popularity >= popularity_stats$p90 ~ "Very Popular",
      popularity >= popularity_stats$p75 ~ "Popular",
      TRUE ~ "Not Popular"
    )
  )

anchor1 <- "Look At Me!"
anchor2 <- "goosebumps"

# playlists that include either song
playlists_with_either <- inner_joined_data |>
  filter(name %in% c(anchor1, anchor2)) |>
  distinct(playlist_id) |>
  pull(playlist_id)


# songs in those playlists, excluding the anchor songs
co_occurring_songs <- inner_joined_data |> ungroup()|>
  filter(playlist_id %in% playlists_with_either,
         !track_name %in% c(anchor1, anchor2)) |>
  count(track_name, artist_name, sort = TRUE)

```

```{r, echo=FALSE , output = TRUE}
co_occurring_songs |> 
  mutate(song = paste0(track_name, " (", artist_name, ")")) |>
  select(song, n) |>
  head(20) |>
  rename("Track" = song, "Number of Appearances" = n) |>
  kable(
    caption = "<b><span style='font-size:18px;'>Top 20 Songs Commonly Appearing with Anchor Songs</span></b>",
    escape = FALSE
  )

  
```

```{r}
# Get key and tempo for the anchor songs
anchor1_info <- inner_joined_data |>
  filter(name == anchor1) |>
  select(key, tempo) |>
  distinct()
anchor2_info <- inner_joined_data |>
  filter(name == anchor2) |>
  select(key, tempo) |>
  distinct()

# songs with similar key , tempo 
similar_songs <- inner_joined_data |>
  filter(!track_name %in% anchor1 & !track_name %in% anchor2) |>
  filter(
    (key == anchor1_info$key[1] & abs(tempo - anchor1_info$tempo[1]) <= 5) |
    (key == anchor2_info$key[1] & abs(tempo - anchor2_info$tempo[1]) <= 5)
  ) |>
  distinct(track_name, artist_name, key, tempo) |>
  arrange(key, abs(tempo - anchor1_info$tempo[1]))

```

## üéõÔ∏è Songs with Similar Tempo & Key

The table below displays 251 songs that share a similar **musical key** and **tempo** with the selected anchor songs. These characteristics are commonly used by DJs to create smooth transitions between tracks. Songs were filtered to match the same key and have a tempo within ¬±5 BPM of the anchor song, ensuring musical coherence. The results are presented in the interactive table below for easy exploration.


```{r, echo=FALSE , output = TRUE}
library(DT)

similar_songs |> 
  rename(
    "Track Name" = track_name,
    "Artist" = artist_name,
    "Key" = key,
    "Tempo" = tempo
  ) |>
  datatable(options = list(
    initComplete = JS("
      function(settings, json) {
        // Change text color of table headers and body
        $(this.api().table().body()).css({'color': 'white'});
        $(this.api().table().header()).css({'color': 'white'});

        // Change text color of pagination buttons
        $('.dataTables_paginate').css({'color': 'white'});
        $('.dataTables_paginate a').css({'color': 'white'});

        // Change text color of 'Show entries' dropdown and label
        $('.dataTables_length label').css({'color': 'white'});
        $('.dataTables_length select').css({'color': 'white', 'background-color': 'black'});

        // Change text color of search box
        $('.dataTables_filter label').css({'color': 'white'});
        $('.dataTables_filter input').css({'color': 'white', 'background-color': 'black'});

        // Change text color of info text ('Showing X to Y of Z entries')
        $('.dataTables_info').css({'color': 'white'});
      }
    ")
  )) |>
  formatStyle(
    columns = c("Track Name", "Artist", "Key", "Tempo"),
    color = 'white'
  )
 
```
## üé§ Songs by Same Artists

```{r}
# get the 2 artists from anchor songs
artist1 <- inner_joined_data|>
  filter(track_name == anchor1)|> select(artist_name)|>
  head(1)

artist2 <- inner_joined_data|>
  filter(track_name == anchor2)|> select(artist_name)|>
  head(1)

# songs by same artists
same_artists <- inner_joined_data |>
  filter(!(track_name %in% c(anchor1, anchor2))) |>
  filter(artist_name %in% c(artist1, artist2)) |>
  distinct(track_name, artist_name)

```

This table displays all songs by the same artists who performed the selected anchor songs, excluding the anchor songs themselves. These tracks were identified by matching the artist names and filtering for unique song titles. This approach highlights additional songs that share stylistic elements with the anchors, making them strong candidates for inclusion in a cohesive playlist.

```{r, echo=FALSE , output = TRUE}

same_artists |> 
  rename(
    "Track Name" = track_name,
    "Artist" = artist_name
  ) |>
  datatable(options = list(
    initComplete = JS("
      function(settings, json) {
        // Change text color of table headers and body
        $(this.api().table().body()).css({'color': 'white'});
        $(this.api().table().header()).css({'color': 'white'});

        // Change text color of pagination buttons
        $('.dataTables_paginate').css({'color': 'white'});
        $('.dataTables_paginate a').css({'color': 'white'});

        // Change text color of 'Show entries' dropdown and label
        $('.dataTables_length label').css({'color': 'white'});
        $('.dataTables_length select').css({'color': 'white', 'background-color': 'black'});

        // Change text color of search box
        $('.dataTables_filter label').css({'color': 'white'});
        $('.dataTables_filter input').css({'color': 'white', 'background-color': 'black'});

        // Change text color of info text ('Showing X to Y of Z entries')
        $('.dataTables_info').css({'color': 'white'});
      }
    ")
  )) |>
  formatStyle(
    columns = c("Track Name", "Artist"),
    color = 'white'
  )
 
```

## üéôÔ∏è Songs released in the same year with similar characteristics

To identify songs that resemble the anchor tracks in musical characteristics, we averaged the acousticness, danceability, instrumentalness, and energy of both anchor songs. We then filtered songs within ¬±25% of these average values and from the same release years. The resulting table shows songs that closely match the overall style of the selected anchors.

```{r}
year1<- inner_joined_data|>
  filter(track_name  == anchor1)|>
  select(year)|> head(1)

year2<- inner_joined_data|>
  filter(track_name  == anchor2)|>
  select(year)|> head(1)

# update the anchor_stats
anchor1_stats<- inner_joined_data|>
  filter(track_name == anchor1) |>
  summarize(
    acousticness = acousticness[1],
    danceability = danceability[1],
    liveness = liveness[1],
    energy = energy[1]
  )

anchor2_stats<- inner_joined_data|>
  filter(track_name == anchor2) |>
  summarize(
    acousticness = acousticness[1],
    danceability = danceability[1],
    liveness = liveness[1],
    energy = energy[1]
  )

avrg_stats <- bind_rows(anchor1_stats, anchor2_stats) |>
  summarize(
    acousticness = mean(acousticness, na.rm = TRUE),
    danceability = mean(danceability, na.rm = TRUE),
    liveness = mean(liveness, na.rm = TRUE),
    energy = mean(energy, na.rm = TRUE))

similar_char <- inner_joined_data|>
  filter(!(track_name %in% c(anchor1, anchor2)))|>
  filter( year %in% c(year1, year2))|>
  filter(
    abs(acousticness - avrg_stats$acousticness) <= 0.25 * avrg_stats$acousticness,
    abs(danceability - avrg_stats$danceability) <= 0.25 * avrg_stats$danceability,
    abs(liveness - avrg_stats$liveness) <= 0.25 * avrg_stats$liveness,
    abs(energy - avrg_stats$energy) <= 0.25 * avrg_stats$energy
  )|>
  select(everything())|>
  distinct(track_name, .keep_all = TRUE)
```

```{r, echo=FALSE , output = TRUE}

similar_char |> 
  select(
    "Track Name" = track_name,
    "Artist" = artist_name,
    "Acousticness" = acousticness,
    "danceability" = danceability,
    "Liveness" = liveness,
    "Energy" = energy,
    "Popularity" = popularity_level,
    "Year" = year
  )|>
  datatable(options = list(
    initComplete = JS("
      function(settings, json) {
        // Change text color of table headers and body
        $(this.api().table().body()).css({'color': 'white'});
        $(this.api().table().header()).css({'color': 'white'});

        // Change text color of pagination buttons
        $('.dataTables_paginate').css({'color': 'white'});
        $('.dataTables_paginate a').css({'color': 'white'});

        // Change text color of 'Show entries' dropdown and label
        $('.dataTables_length label').css({'color': 'white'});
        $('.dataTables_length select').css({'color': 'white', 'background-color': 'black'});

        // Change text color of search box
        $('.dataTables_filter label').css({'color': 'white'});
        $('.dataTables_filter input').css({'color': 'white', 'background-color': 'black'});

        // Change text color of info text ('Showing X to Y of Z entries')
        $('.dataTables_info').css({'color': 'white'});
      }
    ")
  )) |>
  formatStyle(
    columns = c(),
    color = 'white'
  )

```

## üîä Finding Related Songs {#Finding-Related-Songs}

```{r}

#Getting relevant tracks from heuristics
relevant_tracks <- bind_rows(
  co_occurring_songs|> select(track_name),
  same_artists|> select(track_name),
  similar_songs |> select(track_name),
  similar_char|> select(track_name)
  ) |>
    distinct()

# non_popular songs
playlist_nonpopular <- inner_joined_data |>
  filter(name %in% relevant_tracks$track_name) |>
  filter(popularity_level == "Not Popular")|>
  select(name, artist_name, popularity_level)|>
  distinct()

#popular songs
playlist_popular <- inner_joined_data |>
  filter(name %in% relevant_tracks$track_name) |>
  filter(popularity_level == "Very Popular" |
           popularity_level == "Popular")|>
  select(name, artist_name, popularity_level)|>
  distinct()

# getting 8 Non popular songs, 6 popular songs, 6 Very popular songs

fin_playlist <- bind_rows(
  playlist_nonpopular|> sample_n(8),
  playlist_popular|> filter(popularity_level == "Popular")|>
    sample_n(6),
  playlist_popular|> filter(popularity_level == "Very Popular")|>
    sample_n(6))

```


To build a well-rounded and personalized playlist, we began by identifying **relevant tracks** using several heuristic methods based on my two anchor songs:

- **Co-occurring songs** that frequently appear in the same playlists.
- **Tracks by the same artists** as the anchor songs.
- **Songs with a similar musical key and tempo**, which would allow for smoother DJ transitions.
- **Songs with similar audio characteristics**, such as acousticness, danceability, energy, and liveness.

These heuristics were combined into a single list of `relevant_tracks`, ensuring only distinct track names were included.

Next, I categorized the songs by **popularity level**:
- **Not Popular**
- **Popular**
- **Very Popular**

Finally, I curated a **final playlist** by sampling:

- üé∂ 8 non-popular songs  
- üé∂ 6 popular songs  
- üé∂ 6 very popular songs  

This approach creates a balanced and diverse playlist, mixing well-known hits with lesser-known tracks that share musical and stylistic traits with the anchor songs.

```{r,  echo=FALSE , output = TRUE}
fin_playlist|>
  datatable(options = list(
    initComplete = JS("
      function(settings, json) {
        // Change text color of table headers and body
        $(this.api().table().body()).css({'color': 'white'});
        $(this.api().table().header()).css({'color': 'white'});

        // Change text color of pagination buttons
        $('.dataTables_paginate').css({'color': 'white'});
        $('.dataTables_paginate a').css({'color': 'white'});

        // Change text color of 'Show entries' dropdown and label
        $('.dataTables_length label').css({'color': 'white'});
        $('.dataTables_length select').css({'color': 'white', 'background-color': 'black'});

        // Change text color of search box
        $('.dataTables_filter label').css({'color': 'white'});
        $('.dataTables_filter input').css({'color': 'white', 'background-color': 'black'});

        // Change text color of info text ('Showing X to Y of Z entries')
        $('.dataTables_info').css({'color': 'white'});
      }
    ")
  )) |>
  formatStyle(
    columns = c(),
    color = 'white'
  )

```

## üéß Final Playlist  Based on Heuristics and Popularity {#final-playlist}

```{r}
fin_playlist_12 <- bind_rows(
  playlist_nonpopular |> sample_n(4),
  playlist_popular |> filter(popularity_level == "Popular") |> sample_n(4),
  playlist_popular |> filter(popularity_level == "Very Popular") |> sample_n(4)
)

# audio features for visualization
playlist_features <- inner_join(fin_playlist_12, inner_joined_data, 
                                by = c("name" = "name", "artist_name" = "artist_name")) |>
  distinct(name, artist_name, acousticness, energy, danceability, tempo, popularity) |>
  mutate(order = row_number())

# Plotting evolution
playlist_features_long <- playlist_features |>
  select(order, name, acousticness, energy, danceability, tempo) |>
  pivot_longer(-c(order, name), names_to = "feature", values_to = "value")

```


```{r,  echo=FALSE , output = TRUE}
fin_playlist_12|>
  datatable(options = list(pageLength = 12,
    initComplete = JS("
      function(settings, json) {
        // Change text color of table headers and body
        $(this.api().table().body()).css({'color': 'white'});
        $(this.api().table().header()).css({'color': 'white'});

        // Change text color of pagination buttons
        $('.dataTables_paginate').css({'color': 'white'});
        $('.dataTables_paginate a').css({'color': 'white'});

        // Change text color of 'Show entries' dropdown and label
        $('.dataTables_length label').css({'color': 'white'});
        $('.dataTables_length select').css({'color': 'white', 'background-color': 'black'});

        // Change text color of search box
        $('.dataTables_filter label').css({'color': 'white'});
        $('.dataTables_filter input').css({'color': 'white', 'background-color': 'black'});

        // Change text color of info text ('Showing X to Y of Z entries')
        $('.dataTables_info').css({'color': 'white'});
      }
    ")
  )) |>
  formatStyle(
    columns = c(),
    color = 'white'
  )

```

## üìä Analysis of Musical Structure

To understand the sonic journey of my playlist "Pulse & Echo", I analyzed the evolution of key audio features provided by Spotify. These features include:

- Acousticness: Likelihood that a track is acoustic.

- Energy: A measure of intensity and activity (e.g., fast, loud, noisy).

- Danceability: How suitable a track is for dancing based on tempo, rhythm stability, and beat strength.

- Tempo: The overall speed of the song (measured in BPM).

The line chart below displays how these metrics change across the 12 songs in the playlist, following the track order:

```{r , fig.width=10, fig.height= 9, output = TRUE}
# Plot 1: Acousticness, Energy, Danceability
plot1 <- playlist_features|>
  select(name, acousticness, energy, danceability) |>
  pivot_longer(-name, names_to = "Feature", values_to = "Value") |>
  mutate(name = factor(name, levels = playlist_features$name)) |>
  ggplot(aes(x = name, y = Value, color = Feature, group = Feature)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Playlist Feature Progression",
       y = "Value (0 to 1)",
       x = "Track Name",
       color = "Feature")

# Plot 2: Tempo
plot2 <- playlist_features |>
  ggplot(aes(x = factor(name, levels = playlist_features$name), y = tempo)) +
  geom_line(group = 1, color = "steelblue", size = 1.2) +
  geom_point(color = "steelblue", size = 2) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Tempo Progression",
       y = "Tempo (BPM)",
       x = "Track Name")
plot1 / plot2
  

<<<<<<< HEAD
```
=======
```
>>>>>>> 8b9a6ea3f77d061a75484d804cb61528e7d1713e
