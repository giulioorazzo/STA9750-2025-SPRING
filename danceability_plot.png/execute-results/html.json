{
  "hash": "1a60234d615c84cbf7904d9edd8fa2f0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating the Ultimate Playlist\"\nauthor: \"Giulio Orazzo\"\ndate: last-modified\nformat :\n  html: \n    code-fold: true\n    code-summary: \"Show the code\"\n    toc: true\n    toc-location: right\n    toc-title: \"On this page\"\n    css: styles.css\nexecute:\n  output: false\ndraft: false\n---\n\n\n## Table of Contents\n\n1.  [Introduction](#introduction)\n2.  [Data Acquisition](#data-import)\n3.  [Initial Exploration](#initial-exploration)\n4.  [Identifying Characteristics of Popular Songs](#Identifying-Characteristics-of-Popular-Songs)\n5.  [Building a Playlist](#Building-a-Playlist)\n6.  [Finding Related Songs](#Finding-Related-Songs)\n7.  [Final Playlist](#final-playlist)\n\n\n## üéß Pulse & Echo  \n\n### The Ultimate Playlist\n\n*Pulse & Echo* is a 12-track playlist designed to guide the listener through a dynamic musical journey. The sequence weaves through smooth transitions, emotional drops, and uplifting peaks, offering both familiar favorites and new sonic discoveries. With selections spanning synthwave, pop, indie, and Latin crossover, this playlist balances mood, tempo, and energy for moments of reflection, movement, or pure vibe.\n\n---\n\n## üéØ Design Principles\n\n### üî¨ Quantitative Harmony  \nSongs were selected based on closeness in **tempo**, **key**, and compatible values for **acousticness**, **danceability**, **energy**, and **valence**. All features were compared as a percentage deviation from the average anchor song values, ensuring smooth auditory transitions.\n\n### üìà Emotional Trajectory  \nThe playlist follows a **‚Äúrise‚Äìfall‚Äìrise‚Äù** pattern. It begins upbeat, dips into more introspective and atmospheric tracks midway, and picks up again with energetic closers‚Äîcreating an arc that feels cinematic and emotionally resonant.\n\n### üßÆ Data-Driven Selection  \nTracks were selected using a multi-step filtering process based on five key heuristics:\n\n1. **Co-occurrence** with anchor tracks in user playlists  \n2. **Same artist** connections  \n3. **Songs in the same year** with similar Spotify features  \n4. **Key and tempo compatibility**  \n5. **Feature similarity** within ¬±25% of anchor song averages  \n\n\n# Introduction {#introduction}\n\nIn this mini-project, we dive into the world of music analytics to craft The Ultimate Playlist. Using real Spotify data, we analyze both song popularity and audio features to uncover the key elements that make a song stand out. By exploring patterns in user behavior and musical traits, we aim to build a playlist that captures the essence of what listeners love most. Inspired by the legendary ‚ÄúAll Rise‚Äù playlist, this project challenges you to define your own version of musical perfection.\n\n# Data Acquisition {#data-import}\n\n## Song Characteristics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(scales)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(kableExtra)\n\nload_songs <- function() {\n  library(readr)\n  library(here)\n  \n  # Define the directory and file path\n  dir_path <- here(\"data\", \"mp03\")\n  file_name <- \"songs.csv\"\n  file_path <- file.path(dir_path, file_name) \n  \n  # Create directory if it doesn't exist\n  if (!dir.exists(dir_path)) {\n    dir.create(dir_path, recursive = TRUE)\n  }\n  \n  # Download file only if it doesn't exist\n  if (!file.exists(file_path)) {\n    url <- \"https://raw.githubusercontent.com/gabminamedez/spotify-data/refs/heads/master/data.csv\"\n    download.file(url, destfile = file_path, method = \"auto\")\n  }\n  \n  \n  library(readr)\n  songs_df <- read_csv(file_path, show_col_types = FALSE)\n  \n  # Optional: clean column names if necessary\n  # library(janitor)\n  # songs_df <- clean_names(songs_df)\n  \n  return(songs_df)\n}\nsongs_df <- load_songs()\n```\n:::\n\n\nThis dataset contains audio features and metadata for a wide range of tracks. It includes details such as song name, artist(s), album, release year, and attributes like danceability, energy, and popularity. The data was downloaded from a GitHub mirror and required some cleaning‚Äîespecially the artists column, which lists multiple artists in a non-standard format. The cleaned dataset was transformed into a tidy structure, with each row representing one song-artist combination.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(stringr)\nclean_artist_string <- function(x){\n    str_replace_all(x, \"\\\\['\", \"\") |> \n        str_replace_all(\"'\\\\]\", \"\") |>\n        str_replace_all(\" '\", \"\")\n}\nsongs_df <- songs_df |> \n  separate_longer_delim(artists, \",\") |>\n  mutate(artist = clean_artist_string(artists)) |>\n  select(-artists)\n```\n:::\n\n\n\n## Playlist Dataset\n\nThis dataset is a large collection of Spotify user-generated playlists, provided as multiple JSON files. A custom function was written to responsibly download and parse the files only if not already available locally. Since the raw structure is nested and complex, the data was reshaped into a flat, rectangular format. Each row represents a single track within a playlist, including attributes like playlist name, track name, artist, album, and position within the playlist.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload_playlists <- function(n = 10) {\n  base_url <- \"https://raw.githubusercontent.com/DevinOgrady/spotify_million_playlist_dataset/main/data1/\"\n  dir_path <- \"data/mp03/playlists\"\n  if (!dir.exists(dir_path)) dir.create(dir_path, recursive = TRUE)\n\n  playlists <- list()\n\n  for (i in 0:(n - 1)) {\n    start <- i * 1000\n    end <- start + 999\n    file_name <- sprintf(\"mpd.slice.%d-%d.json\", start, end)\n    file_url <- paste0(base_url, file_name)\n    file_path <- file.path(dir_path, file_name)\n\n    if (!file.exists(file_path)) {\n      message(\"Downloading: \", file_name)\n      result <- tryCatch({\n        download.file(file_url, file_path, mode = \"wb\", quiet = TRUE)\n        TRUE\n      }, error = function(e) {\n        message(\"Failed to download \", file_name)\n        FALSE\n      })\n\n      if (!result) next\n    }\n\n    if (file.exists(file_path)) {\n      json_data <- tryCatch({\n        jsonlite::fromJSON(file_path)\n      }, error = function(e) {\n        message(\"Failed to parse \", file_name)\n        NULL\n      })\n\n      if (!is.null(json_data)) {\n        playlists[[length(playlists) + 1]] <- json_data$playlists\n      }\n    }\n  }\n\n  return(playlists)\n}\n\nif (file.exists(\"data/processed_playlists.rds\")) {\n  playlists <- readRDS(\"data/processed_playlists.rds\")\n} else {\n  playlists <- load_playlists(n = 10)\n  saveRDS(playlists, \"data/processed_playlists.rds\")\n}\n\n\nplaylists <- load_playlists(n = 10)  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(stringr)\n\n# Provided function to clean Spotify URIs\nstrip_spotify_prefix <- function(x){\n  str_extract(x, \".*:.*:(.*)\", group = 1)\n}\n\n# building the tidy dataframe\nrectangular_tracks_df <- playlists[[1]] |>\n  mutate(playlist_id = pid,\n         playlist_name = name,\n         playlist_followers = num_followers) |>\n  select(playlist_id, playlist_name, playlist_followers, tracks) |>\n  unnest(tracks) |>\n  mutate(\n    artist_id = strip_spotify_prefix(artist_uri),\n    track_id = strip_spotify_prefix(track_uri),\n    album_id = strip_spotify_prefix(album_uri),\n    playlist_position = row_number()\n  ) |>\n  rename(\n    artist_name = artist_name,\n    track_name = track_name,\n    album_name = album_name,\n    duration = duration_ms\n  ) |>\n  select(\n    playlist_name,\n    playlist_id,\n    playlist_position,\n    playlist_followers,\n    artist_name,\n    artist_id,\n    track_name,\n    track_id,\n    album_name,\n    album_id,\n    duration\n  )\n```\n:::\n\n\n# Initial Exploration {#initial-exploration}\n\n#### How many distinct tracks and artists are represented in the playlist data?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_artist <- rectangular_tracks_df|> summarise(\n  distinct_count = n_distinct(artist_name)\n)\n\ndist_track <- rectangular_tracks_df|> summarise(\n  distinct_count = n_distinct(track_name)\n)\n```\n:::\n\n\n\n- There are 30049 tracks and 9722 artists in the playlist dataset.\n\n#### What are the 5 most popular tracks in the playlist data?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmost_pop_tracks <- rectangular_tracks_df|>\n  group_by(track_name)|>\n  summarize(\n    artist_name = first(artist_name),\n    album_name = first(album_name),\n    track_id = first(track_id),\n    count = n())|>\n  arrange(desc(count))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Track Name                  |Artist         |Album                 | # of Appereance in Playlists|\n|:---------------------------|:--------------|:---------------------|----------------------------:|\n|Closer                      |Ne-Yo          |Year Of The Gentleman |                           75|\n|One Dance                   |Drake          |Views                 |                           55|\n|HUMBLE.                     |Kendrick Lamar |DAMN.                 |                           52|\n|Ride                        |Ciara          |Basic Instinct        |                           52|\n|Broccoli (feat. Lil Yachty) |DRAM           |Big Baby DRAM         |                           50|\n\n\n:::\n:::\n\n\nThe table shows the 5 most popular songs, and how many time they appeared in different playlists.\n\n\n#### What is the most popular track in the playlist data that does not have a corresponding entry in the song characteristics data?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsongs_df<- songs_df|>\n  rename(\"track_id\" = id)\n\n# joining the 2 datasets by the track ID \njoined_data <- songs_df|>\n  left_join(rectangular_tracks_df, by =  \"track_id\")\n\ncount_of_NA <- joined_data|>\n  summarize(na_count = sum(is.na(playlist_name)))\n\n\n# Find tracks in playlists_data not present in songs\nunmatched_tracks <- rectangular_tracks_df |>\n  anti_join(songs_df, by = \"track_id\")\n\n# Count and find the most frequent unmatched track\nmost_popular_unmatched <- unmatched_tracks |>\n  count(track_name, artist_name, sort = TRUE) |>\n  slice_max(n, n = 1)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption><b><span style=\"font-size:18px;\">Most Popular Unmatched Song</span></b></caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Track Name </th>\n   <th style=\"text-align:left;\"> Artist Name </th>\n   <th style=\"text-align:right;\"> Play Count </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> One Dance </td>\n   <td style=\"text-align:left;\"> Drake </td>\n   <td style=\"text-align:right;\"> 55 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n#### According to the song characteristics data, what is the most ‚Äúdanceable‚Äù track? How often does it appear in a playlist?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#get the most danceable song\nmost_danceable<- joined_data|>\n  group_by(name)|>\n  arrange(desc(danceability))|>\n  head(5)\n# counting number of appearences\ndance_count<- rectangular_tracks_df|>\n  filter(track_id == most_danceable$track_id[1])|>\n  summarize(appereances = n())\n```\n:::\n\n\n\n- The most **danceable** track in the dataset is *Funky Cold Medina* by *Tone\\-Loc*, which appears 1 time in the playlist *\"VACATION\"*\n\n#### Which playlist has the longest average track length?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrectangular_tracks_df <- rectangular_tracks_df|>\n  group_by(playlist_name)|>\n  mutate(avg_duration = mean(duration))|>\n  ungroup()|>\n  mutate(avg_duration = avg_duration / 1000,  # converting ms to seconds\n         avg_duration_min = avg_duration / 60)  \n\nlong_avg <- rectangular_tracks_df|>\n  slice_max(avg_duration)\n```\n:::\n\n\n\n- **\"classical\"** is the playlist with **longest average track lenght**, with an average duration of 411 seconds , or about 7 minutes for each song.\n\n#### What is the most popular playlist on Spotify?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmost_pop_play <- rectangular_tracks_df|>\n  slice_max(playlist_followers)\n```\n:::\n\n\n\n- The **most popular playlist** on Spotify is **Tangled** with 1038 followers.\n\n\n# Identifying Characteristics of Popular Songs {#Identifying-Characteristics-of-Popular-Songs}\n\n## Combining the Datasets\n\nTo analyze both song characteristics and playlist behavior, we use an `inner_join` to merge the playlist and song datasets based on track IDs. \n\nThis approach ensures that only songs appearing in both datasets are included in our analysis. Although this results in the loss of some playlist data (since not every track has corresponding song characteristics), it allows for a cleaner dataset with complete information. Given the differences in timing and structure between the two data exports, this is the most practical solution.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# joining the 2 datasets by the track ID  using inner_join\ninner_joined_data <- songs_df|>\n  inner_join(rectangular_tracks_df, by =  \"track_id\")\n```\n:::\n\n\n## Defining Popularity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# defining stats using percentiles\npopularity_stats <- inner_joined_data |> \n  summarize(\n    min_pop = min(popularity),\n    max_pop = max(popularity),\n    mean_pop = mean(popularity),\n    median_pop = median(popularity),\n    p75 = quantile(popularity, 0.75),\n    p90 = quantile(popularity, 0.90)\n  )\n popularity_stats$mean_pop <- round(popularity_stats$mean_pop, 2)\n```\n:::\n\n\n\nTo explore how song popularity relates to playlist appearances, we examined the distribution of the popularity variable and set a threshold to define what counts as a **\"popular\"** songs. \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| Min| Max| Average| Median| 75 Percentile| 90 Percentile|\n|---:|---:|-------:|------:|-------------:|-------------:|\n|   6|  92|   63.81|     65|            72|            77|\n\n\n:::\n:::\n\n\n\nThe table above shows the popularity statistics of all the tracks in the dataset. We decide to use the *75 Percentile* as a threshold  to define a **\"Popular Song\"**, and the *\"90 Percentile\"* as a threshold for **\"Very Popular Songs\"**. Any track with a **popularity index** above 72 will be considered **Popular** , while any track with a **popularity index** above 77 will be considered **Very Popular**.\n\n## Is the popularity column correlated with the number of playlist appearances? If so, to what degree?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# counting playilist appearances in the inner_jointed dataset\ninner_joined_data <- inner_joined_data|>\n  group_by(track_id)|>\n  mutate( playlist_appereance = n())|>\n  ungroup()\n\n# getting the first occurence of each song\npopular_songs <-inner_joined_data|>\n  group_by(track_id)|>\n  slice(1)|>\n  arrange(desc(popularity))\n```\n:::\n\n\n\n### The table below show the **Top 5** most popular songs using **Popularity Index**\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Song           |Artist           |Album Name                      | Popularity Index| # of Playlist Appearence|\n|:--------------|:----------------|:-------------------------------|----------------:|------------------------:|\n|goosebumps     |Travis Scott     |Birds In The Trap Sing McKnight |               92|                       35|\n|Play Date      |Melanie Martinez |Cry Baby                        |               91|                        1|\n|Jocelyn Flores |XXXTENTACION     |17                              |               87|                       11|\n|Perfect        |Ed Sheeran       |√∑                               |               86|                        7|\n|Shape of You   |Ed Sheeran       |√∑                               |               85|                       30|\n\n\n:::\n:::\n\n\n\n### The table below show the **Top 5** most popular songs by **Playlist Appereances**\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Song                                                                                           |Artist             |Album Name                                                       | Popularity Index| # of Playlist Appearence|\n|:----------------------------------------------------------------------------------------------|:------------------|:----------------------------------------------------------------|----------------:|------------------------:|\n|F**kin' Problems (feat. Drake, 2 Chainz & Kendrick Lamar)                                      |A$AP Rocky'        |LONG.LIVE.A$AP (Deluxe Version)                                  |               76|                      120|\n|Champions                                                                                      |Kanye West'        |Champions                                                        |               68|                      120|\n|Sucker for Pain (with Wiz Khalifa, Imagine Dragons, Logic & Ty Dolla $ign feat. X Ambassadors) |Lil Wayne'         |Sucker For Pain (with Logic & Ty Dolla $ign feat. X Ambassadors) |               77|                      102|\n|No Problem (feat. Lil Wayne & 2 Chainz)                                                        |Chance the Rapper' |Coloring Book                                                    |               73|                       93|\n|Closer                                                                                         |The Chainsmokers'  |Closer                                                           |               84|                       92|\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopular_songs|> ggplot(\n  aes(x = popularity , \n      y = playlist_appereance)) +\n  geom_point(color = \"darkblue\", size = 2) +\n  labs(\n    title = \"Popularity VS Playlist Appereance\",\n    x = \"Popularity\",\n    y = \"Playlist Appereance\"\n  ) +\n  theme_bw() +\n  theme(\n    axis.title.x = element_text(margin = margin(t = 15)),\n    axis.title.y = element_text(margin = margin(r = 15)),\n    axis.text = element_text(size = 12),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(size = 20, face = \"bold\")\n  ) \n```\n\n::: {.cell-output-display}\n![](mp03_files/figure-html/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n\nThe scatterplot shows a wide dispersion of points without a clear linear pattern, indicating a **weak or no strong correlation** between the **popularity index** and the number of **playlist appearances**. While a few popular songs do appear frequently in playlists, many others have high popularity but low appearances, or vice versa. This suggests that playlist frequency alone doesn't strongly predict popularity.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrelation <-cor(popular_songs$popularity, popular_songs$playlist_appereance, use = \"complete.obs\")\n```\n:::\n\n\n\nUpon further investigation, we found that the correlation between the 2 variable is 0.38, which indicates weak correlation, and validates our original thesis.\n\n## In what year were the most popular songs released?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop_song_years <- inner_joined_data |>\n  group_by(year) |>\n  summarize(avg_pop = mean(popularity, na.rm = TRUE)) |>\n  arrange(desc(avg_pop))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n\n# Plot\npop_plot <- ggplot(pop_song_years, aes(x = year, y = avg_pop)) +\n  geom_line(color = \"steelblue\", size = 1.2) +\n  geom_point(color = \"darkorange\", size = 2) +\n  labs(title = \"Average Popularity of Songs by Year\",\n       x = \"Year\", y = \"Average Popularity\") +\n  theme_bw(base_size = 14)\n\n# Table \ntop_years_table <- pop_song_years |> \n  slice_max(avg_pop, n = 5) |> \n  select(Year = year, `Avg Popularity` = avg_pop)\n\ntop_years_table$`Avg Popularity`<- round(top_years_table$`Avg Popularity`, 2)\n\ntable_grob <- gridExtra::tableGrob(top_years_table)\n\n# Combine side-by-side\npop_plot + patchwork::wrap_elements(table_grob)+ \n  plot_layout(widths = c(3, 1))  \n```\n\n::: {.cell-output-display}\n![](mp03_files/figure-html/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n\nThe graph illustrates the average popularity of songs over time, showing a general upward trend‚Äîsuggesting that songs from more recent years tend to be more popular.\n\nNext to the graph, the table displays the **Top 5 Most Popular Year** in which songs were released. \n\n\n## In what year did danceability peak?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculating average of dancebility for each year\ndanceability <- inner_joined_data|>\n  group_by(year)|>\n  mutate(avg_danceability = mean(danceability))|>\n  arrange(desc(avg_danceability))\n```\n:::\n\n\n\nIn **2017** we see the higher danceability score, with an index of **0.71**. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndanceability|> ggplot(\n  aes(x = year , \n      y = avg_danceability)) +\n  geom_point(color = \"darkorange\", size = 3) +\n  labs(\n    title = \"Linear Trend of Danceability Over Time\",\n    x = \"Year\",\n    y = \"Average Danceability\"\n  ) +\n  theme_bw() +\n  theme(\n    axis.title.x = element_text(margin = margin(t = 15)),\n    axis.title.y = element_text(margin = margin(r = 15)),\n    axis.text = element_text(size = 12),\n    axis.title = element_text(size = 16),\n    plot.title = element_text(size = 20, face = \"bold\")\n  ) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\")+\n  scale_x_continuous(breaks = seq(min(danceability$year), max(danceability$year), by = 10)) \n```\n\n::: {.cell-output-display}\n![](mp03_files/figure-html/unnamed-chunk-24-1.png){width=960}\n:::\n\n```{.r .cell-code}\nggsave(\"danceability_plot.png\")\n```\n:::\n\n\nThis plot visualizes the distribution of **danceability** of tracks across the years. Danceability measures how suitable a track is for dancing, and values range from 0 to 1. Higher values indicate that the track is more suitable for dancing. This plot illustrates an upward trend in danceability over the years, suggesting that more recent tracks tend to be increasingly suited for dancing.\n\n\n## Which decade is most represented on user playlists? \n\nTo find the **most represented decades** in the playlists, we group the playlist data by decade  and count how many times songs from each decade appear.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# grouping by decades\ninner_joined_data<- inner_joined_data|>\n   mutate(decade = paste0((year %/% 10) * 10, \"s\"))\n\n\nlibrary(scales)\n# sum of appereances in playlist by decade\nrepr_decades<- inner_joined_data|>\n  group_by(decade)|>\n  summarize(total_appearances = sum(playlist_appereance, na.rm = TRUE)) |> \n  arrange(desc(total_appearances))|>\n  mutate(total_appearances = number(total_appearances, big.mark = \",\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Decade |Total Appearances in Playlists |\n|:------|:------------------------------|\n|2010s  |469,475                        |\n|2000s  |54,649                         |\n|1990s  |19,889                         |\n|1980s  |11,031                         |\n|1970s  |9,041                          |\n|1960s  |3,733                          |\n|1940s  |500                            |\n|1950s  |223                            |\n|1930s  |2                              |\n\n\n:::\n:::\n\n\n\n## üéµ Graph Description ‚Äì Frequency of Musical Keys (Polar Plot):\n\nThis polar plot illustrates the **frequency of musical keys**, represented as numbers from **0 to 11**, where each number corresponds to a musical key (e.g., 0 = C, 1 = C‚ôØ/D‚ô≠, 2 = D, etc.). The circular layout reflects the **cyclical nature of musical keys**, akin to the **Circle of Fifths** in music theory.\n\nEach bar‚Äôs height indicates how often that key appears among the songs in user playlists. This visualization helps identify which keys are most common, offering insights into musical trends and preferences. Despite using numeric values, the cyclical arrangement of keys remains intuitive in this format.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the frequency of each key\nkey_frequency <- inner_joined_data |>\n  group_by(key) |>\n  summarize(count = n()) |>\n  arrange(desc(count))\n\n# Create a polar plot\nggplot(key_frequency, aes(x = as.factor(key), y = count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\", color = \"black\") +\n  coord_polar(start = 0) +\n  theme_bw() +\n  labs(title = \"Frequency of Musical Keys Among Songs\",\n       x = \"Musical Key\",\n       y = \"Frequency\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        axis.text = element_text(size = 12),\n        axis.title = element_text(size = 16),\n        plot.title = element_text(size = 20, face = \"bold\"))\n```\n\n::: {.cell-output-display}\n![](mp03_files/figure-html/unnamed-chunk-27-1.png){width=960}\n:::\n:::\n\n\n\n## Track Duration Stats\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#convert duration in minutes \ninner_joined_data <- inner_joined_data |> \n  mutate(duration_min = duration_ms / 60000)\n\n# calculating mean and percentiles to see avg track length\nlength_info <- inner_joined_data |> \n  summarize( avg_length = mean(duration_min),\n    median_length = median(duration_min),\n    shortest = min(duration_min),\n    longest = max(duration_min),\n    p25 = quantile(duration_min, 0.25),\n    p75 = quantile(duration_min, 0.75)\n  )\nlength_info$avg_length <- round(length_info$avg_length, 2)\nlength_info$median_length <- round(length_info$median_length, 2)\nlength_info$shortest <- round(length_info$shortest, 2)\nlength_info$longest <- round(length_info$longest, 2)\nlength_info$p25 <- round(length_info$p25, 2)\nlength_info$p75 <- round(length_info$p75, 2)\n```\n:::\n\n\n\nThe table below summarizes key statistics about the distribution of track lengths (in minutes) among the songs included in user playlists. It includes the **average** and **median** track length, as well as the **shortest** and **longest** tracks in the dataset. Additionally, the table shows the **25th percentile** and **75th percentile**  values, which define the **interquartile range (IQR)** ‚Äî the range that contains the middle 50% of all track lengths.\n\nWe can see from the table that most tracks tend to be the range 3.4 and 4.4 minutes, suggesting a preference for mid-length songs.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| Average| Median| Shortest| Longest| 25 Percentile| 75 Percentile|\n|-------:|------:|--------:|-------:|-------------:|-------------:|\n|    3.97|   3.83|     0.64|   37.31|           3.4|           4.4|\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(inner_joined_data, aes(x = duration_min)) +\n  geom_histogram(binwidth = 0.5, fill = \"darkorange\", color = \"white\") +\n  labs(\n    title = \"Distribution of Track Lengths in User Playlists\",\n    x = \"Track Length (minutes)\",\n    y = \"Number of Songs\"\n  ) +\n  theme_bw()+\n  theme(axis.text = element_text(size = 12),\n        axis.title = element_text(size = 16),\n        plot.title = element_text(size = 20, face = \"bold\"))+\n  scale_x_continuous(limits = c(0, 10, 2))\n```\n\n::: {.cell-output-display}\n![](mp03_files/figure-html/unnamed-chunk-30-1.png){width=960}\n:::\n:::\n\n\n\n# üéß Building a Playlist {#Building-a-Playlist}\n\nMy two **anchor tracks** are *\"Look at Me\"* by *XXXTentacion* and *\"goosebumps\"* by *Travis Scott*. To find songs that work well with my anchor tracks, I first identified all playlists that contain either of the two songs I selected. Then, I looked at what other songs appear on those same playlists. This method helps surface tracks that users often group with one of my anchors, suggesting they share similar vibes, styles, or transitions‚Äîmaking them strong candidates for inclusion in a cohesive playlist.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# defining popularity level using the percentiles\ninner_joined_data<- inner_joined_data|>\n  mutate(\n    popularity_level = case_when(\n      popularity >= popularity_stats$p90 ~ \"Very Popular\",\n      popularity >= popularity_stats$p75 ~ \"Popular\",\n      TRUE ~ \"Not Popular\"\n    )\n  )\n\nanchor1 <- \"Look At Me!\"\nanchor2 <- \"goosebumps\"\n\n# playlists that include either song\nplaylists_with_either <- inner_joined_data |>\n  filter(name %in% c(anchor1, anchor2)) |>\n  distinct(playlist_id) |>\n  pull(playlist_id)\n\n\n# songs in those playlists, excluding the anchor songs\nco_occurring_songs <- inner_joined_data |> ungroup()|>\n  filter(playlist_id %in% playlists_with_either,\n         !track_name %in% c(anchor1, anchor2)) |>\n  count(track_name, artist_name, sort = TRUE)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: <b><span style='font-size:18px;'>Top 20 Songs Commonly Appearing with Anchor Songs</span></b>\n\n|Track                                                                                                      | Number of Appearances|\n|:----------------------------------------------------------------------------------------------------------|---------------------:|\n|Champions (Kanye West)                                                                                     |                    64|\n|No Problem (feat. Lil Wayne & 2 Chainz) (Chance The Rapper)                                                |                    48|\n|Congratulations (Post Malone)                                                                              |                    44|\n|Bad and Boujee (feat. Lil Uzi Vert) (Migos)                                                                |                    42|\n|iSpy (feat. Lil Yachty) (KYLE)                                                                             |                    40|\n|Sucker For Pain (with Wiz Khalifa, Imagine Dragons, Logic & Ty Dolla $ign feat. X Ambassadors) (Lil Wayne) |                    36|\n|X (feat. Future) (21 Savage)                                                                               |                    36|\n|Chill Bill (Rob $tone)                                                                                     |                    33|\n|Portland (Drake)                                                                                           |                    33|\n|F**kin' Problems (A$AP Rocky)                                                                              |                    32|\n|Drowning (feat. Kodak Black) (A Boogie Wit da Hoodie)                                                      |                    30|\n|No Hands (feat. Roscoe Dash and Wale) - Explicit Album Version (Waka Flocka Flame)                         |                    30|\n|Work REMIX (A$AP Ferg)                                                                                     |                    30|\n|It's A Vibe (2 Chainz)                                                                                     |                    28|\n|pick up the phone (Young Thug)                                                                             |                    28|\n|Black Beatles (Rae Sremmurd)                                                                               |                    26|\n|Slippery (feat. Gucci Mane) (Migos)                                                                        |                    26|\n|$ave Dat Money (feat. Fetty Wap & Rich Homie Quan) (Lil Dicky)                                             |                    24|\n|Everyday (A$AP Rocky)                                                                                      |                    24|\n|HUMBLE. (Kendrick Lamar)                                                                                   |                    24|\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get key and tempo for the anchor songs\nanchor1_info <- inner_joined_data |>\n  filter(name == anchor1) |>\n  select(key, tempo) |>\n  distinct()\nanchor2_info <- inner_joined_data |>\n  filter(name == anchor2) |>\n  select(key, tempo) |>\n  distinct()\n\n# songs with similar key , tempo \nsimilar_songs <- inner_joined_data |>\n  filter(!track_name %in% anchor1 & !track_name %in% anchor2) |>\n  filter(\n    (key == anchor1_info$key[1] & abs(tempo - anchor1_info$tempo[1]) <= 5) |\n    (key == anchor2_info$key[1] & abs(tempo - anchor2_info$tempo[1]) <= 5)\n  ) |>\n  distinct(track_name, artist_name, key, tempo) |>\n  arrange(key, abs(tempo - anchor1_info$tempo[1]))\n```\n:::\n\n\n\n## üéõÔ∏è Songs with Similar Tempo & Key\n\nThe table below displays 251 songs that share a similar **musical key** and **tempo** with the selected anchor songs. These characteristics are commonly used by DJs to create smooth transitions between tracks. Songs were filtered to match the same key and have a tempo within ¬±5 BPM of the anchor song, ensuring musical coherence. The results are presented in the interactive table below for easy exploration.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-eabf0ed5b310aeeb496f\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-eabf0ed5b310aeeb496f\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\",\"235\",\"236\",\"237\",\"238\",\"239\",\"240\",\"241\",\"242\",\"243\",\"244\",\"245\",\"246\",\"247\",\"248\",\"249\",\"250\",\"251\"],[\"No Frauds\",\"The Fortunate\",\"I Can Drive\",\"Celeste\",\"Keg in the Closet\",\"The Goonies 'R' Good Enough\",\"What They Want\",\"It's Nothin - feat. 2 Chainz\",\"Les eaux de Mars\",\"La Bilirrubina - Live\",\"Sober Saturday Night (feat. Vince Gill)\",\"The Law (feat. Mac Miller &amp; Rapsody)\",\"Te Fuiste de Aqu√≠\",\"DNA.\",\"Love Don't Live Here\",\"You Really Got Me - 2015 Remastered Version\",\"I Don't Get Tired (#IDGT) [feat. August Alsina]\",\"Gold\",\"Darte un Beso\",\"Slave Master\",\"The Town\",\"Sinners Like Me\",\"Not A Regular Person\",\"Like a Cowboy\",\"Heartbeat\",\"Off the Wall!\",\"Birthday Song\",\"Gucci On My (feat. 21 Savage, YG &amp; Migos)\",\"One Thing\",\"Addicted To My Ex\",\"We Still In This Bitch (feat. T.I. and Juicy J)\",\"Lights - Bassnectar Remix\",\"Wasted\",\"Loud\",\"You Say I'm in Love\",\"Crave You - Adventure Club Remix\",\"Black SpiderMan\",\"Slum Anthem\",\"Hustle Hard Remix\",\"Ni**as In Paris\",\"Uber Everywhere (feat. Travis Scott)\",\"The Red\",\"I'm so Groovy\",\"Before I Let You Go\",\"Centipede\",\"I Heard Goodbye\",\"Pretty Lady\",\"Confessions Part II - Confessions Special Edition Version\",\"Ordinary World\",\"Scared to Be Lonely\",\"Uber Everywhere\",\"Wait And See\",\"Rocket\",\"The Way\",\"Runaway\",\"***Flawless\",\"Promises\",\"Like Jesus Does\",\"Vacation\",\"Just Another Girl\",\"crushcrushcrush\",\"Young Dumb &amp; Broke\",\"Jump Out The Window\",\"Fall For Your Type\",\"Unchained\",\"Grind With Me\",\"Grind With Me\",\"Schemin Up (feat. Drake and P. Reign)\",\"SideLine Watching (Hold Up)\",\"Misunderstood\",\"Stay\",\"Eet\",\"Never Knew I Needed\",\"Slippery (feat. Gucci Mane)\",\"Do It Myself\",\"Round Here\",\"In Da Building (feat. Max Minelli)\",\"Breakdown\",\"Keep It Mello (feat. Omar LinX)\",\"Hero\",\"Portland\",\"Facts (Charlie Heat Version)\",\"Groove Witcha\",\"Kobe\",\"Jumpman\",\"Diamonds Dancing\",\"Party\",\"Vica Versa\",\"Shores of Waiehu\",\"Medicated - feat. Chevy Woods &amp; Juicy J\",\"All Of The Lights\",\"Coleccionista de Canciones\",\"Kodachrome\",\"No One's Gonna Love You - Live from Spotify Sweden\",\"Strange Things\",\"When I Get My Hands On You\",\"59th Street Bridge Song - Feelin' Groovy [Remastered Version]\",\"Not Meant To Be\",\"Drive\",\"On My Level - feat. Too $hort\",\"No Control\",\"How It Was (feat. Future)\",\"Married To The Game\",\"White &amp; Nerdy (Parody of \\\"Ridin'\\\" by Chamillionaire feat. Krayzie Bone)\",\"Red White &amp; Blue\",\"The Presence of the Lord Is Here\",\"Submersible\",\"STFU\",\"Rap Saved Me\",\"I Know\",\"Heart of Courage\",\"Feels - Jai Wolf Remix\",\"Summer Bummer (feat. A$AP Rocky &amp; Playboi Carti)\",\"Drown - New\",\"Ball and Chain\",\"Colors - Audien Remix\",\"Bigmouth Strikes Again - 2011 Remastered Version\",\"Dream\",\"Another Day\",\"I've Got a Dream - From \\\"Tangled\\\"/Soundtrack Version\",\"It's A Beautiful Day\",\"Trophies\",\"Glory And Gore\",\"Bacon\",\"How Low\",\"Slow Dancing in a Burning Room\",\"Talladega\",\"Rude\",\"That's What I Like\",\"I Smile\",\"Drivin‚Äô Around Song (feat. Jason Aldean)\",\"Send For Me\",\"No One Needs To Know\",\"Found Out About You\",\"Solo el Fin (For All We Know)\",\"I Got A Girl\",\"Vasos Vac√≠os - Remasterizado 2008\",\"A Love of Your Own\",\"China Girl - 2002 Remastered Version\",\"sobeautiful\",\"Deja Vu\",\"The Business (featuring Casha)\",\"Who's Cheatin' Who\",\"Squeeze Box\",\"Sideshow\",\"Out Of Limits\",\"Pop Style\",\"A Little Less Sixteen Candles, A Little More \\\"Touch Me\\\"\",\"i miss the old u\",\"Loco\",\"Get Ready\",\"When You Got A Good Thing\",\"She's Got It All\",\"You Ain't Goin' Nowhere\",\"Vivir sin aire\",\"Brotha\",\"Mentira\",\"Supersonic\",\"You Are More\",\"Today 4 U\",\"Planetary [GO!]\",\"Drinkin' Beer And Wastin' Bullets\",\"You Make Me Feel... - feat. Sabi\",\"Jackson\",\"Desire\",\"Mine Again\",\"Do It Again\",\"Something To Believe In\",\"Who Says You Can't Go Home - Duet with Jennifer Nettles of Sugarland Version\",\"Who Were You Thinkin' Of\",\"Cover Me\",\"Concerning the UFO sighting near Highland, Illinois\",\"Rollout (My Business)\",\"Dirt\",\"Give It All We Got Tonight\",\"When The Day Met The Night\",\"White Iverson\",\"Coming of Age\",\"By Your Side\",\"Unforgettable\",\"Everything Moves\",\"Yoga\",\"Good Times\",\"Rechazame\",\"Calling All Skeletons\",\"Cut It (feat. Young Dolph)\",\"Heavydirtysoul\",\"All We'd Ever Need\",\"Don't Bother\",\"She Wolf (Falling to Pieces) [feat. Sia]\",\"Stay\",\"Ride\",\"Castle\",\"Everybody Dies In Their Nightmares\",\"No Way\",\"Why Won't They Talk To Me?\",\"Don't Ask Me No Questions\",\"Workin' Day and Night\",\"I Love L.A.\",\"Forever Ain't Enough\",\"Light My Fire - Mono [Single Version]\",\"This is Our Song\",\"Mr. Misunderstood\",\"Ready For Love - 2015 Remastered Version\",\"Image Of The Invisible\",\"Cooler Than Me\",\"That Ain't My Truck\",\"Gangsta\",\"It's A Great Day To Be Alive\",\"Water Tower\",\"I'm In A Hurry (And Don't Know Why)\",\"Colors\",\"Oh\",\"Chasing The Sun\",\"I Want\",\"The Call\",\"No Plan B\",\"Golden Days\",\"Tango: Maureen\",\"Uncle John's Band\",\"Into the Night\",\"A-Team\",\"Celluloid Heroes - Live\",\"Te Robar√©\",\"Blas√© (feat. Future &amp; Rae Sremmurd) - Louis The Child Remix\",\"Radio\",\"We're an American Band - 2002 - Remastered\",\"Home\",\"You Shook Me All Night Long\",\"My My, Hey Hey (Out of the Blue)\",\"Bibia Be Ye Ye\",\"One Of Those Nights\",\"Miss You\",\"Don't Run Away\",\"Carry on Wayward Son\",\"Time\",\"Hanky Panky - Single Version\",\"Shhh\",\"Kill The Lights (with Nile Rodgers) - Audien Remix\",\"lose\",\"Salvation Song\",\"Raging Fire\",\"Gone Country\",\"Daydream Believer\",\"Miss World\",\"Wild Thing\",\"Amanda\",\"I Get Lonely\",\"Both Of Us (feat. Taylor Swift) - feat. Taylor Swift\",\"Limbo\",\"Owner Of A Lonely Heart\"],[\"Nicki Minaj\",\"Cartel\",\"Lil Uzi Vert\",\"Ezra Vine\",\"Kenny Chesney\",\"Cyndi Lauper\",\"Russ\",\"Wiz Khalifa\",\"Stacey Kent\",\"Juan Luis Guerra 4.40\",\"Chris Young\",\"Ab-Soul\",\"Reik\",\"Kendrick Lamar\",\"Lady Antebellum\",\"Van Halen\",\"Kevin Gates\",\"Chet Faker\",\"Prince Royce\",\"Future\",\"The Weeknd\",\"Eric Church\",\"A Boogie Wit da Hoodie\",\"Randy Houser\",\"Carrie Underwood\",\"XXXTENTACION\",\"2 Chainz\",\"Mike WiLL Made-It\",\"Kevin Gates\",\"M City JR\",\"B.o.B\",\"Ellie Goulding\",\"Cartel\",\"Mac Miller\",\"Banes World\",\"Flight Facilities\",\"Logic\",\"K CAMP\",\"Ace Hood\",\"JAY Z\",\"MadeinTYO\",\"Chevelle\",\"Future\",\"Blackstreet\",\"Knife Party\",\"Dan + Shay\",\"Rebelution\",\"Usher\",\"Duran Duran\",\"Martin Garrix\",\"MadeinTYO\",\"Iration\",\"Beyonc√©\",\"Jill Scott\",\"Love and Theft\",\"Beyonc√©\",\"Wiz Khalifa\",\"Eric Church\",\"Thomas Rhett\",\"The Killers\",\"Paramore\",\"Khalid\",\"Big Sean\",\"Jamie Foxx\",\"Van Halen\",\"Pretty Ricky\",\"Pretty Ricky\",\"OB OBrien\",\"Lil Uzi Vert\",\"PnB Rock\",\"Florida Georgia Line\",\"Regina Spektor\",\"Ne-Yo\",\"Migos\",\"Russ\",\"Florida Georgia Line\",\"Max Minelli\",\"Seether\",\"Omar LinX\",\"Skillet\",\"Drake\",\"Kanye West\",\"Norm\",\"Chief Keef\",\"Drake\",\"Drake\",\"Chris Brown\",\"Pastor Troy\",\"Ekolu\",\"Wiz Khalifa\",\"Kanye West\",\"Camila\",\"Paul Simon\",\"Band of Horses\",\"Randy Newman\",\"The New Basement Tapes\",\"Harpers Bizarre\",\"Theory of a Deadman\",\"Miley Cyrus\",\"Wiz Khalifa\",\"One Direction\",\"DJ Esco\",\"Future\",\"\\\"Weird Al\\\" Yankovic\",\"Lynyrd Skynyrd\",\"Byron Cage\",\"Passafire\",\"mansionz\",\"21 Savage\",\"Yo Gotti\",\"Thomas Bergersen\",\"Kiiara\",\"Lana Del Rey\",\"Bring Me The Horizon\",\"Social Distortion\",\"Halsey\",\"The Smiths\",\"Imagine Dragons\",\"Adam Pascal\",\"Mandy Moore\",\"Michael Bubl√©\",\"Young Money\",\"Lorde\",\"Nick Jonas\",\"Ludacris\",\"John Mayer\",\"Eric Church\",\"MAGIC!\",\"Bruno Mars\",\"Kirk Franklin\",\"Colt Ford\",\"Atlantic Starr\",\"Shania Twain\",\"Gin Blossoms\",\"Astrud Gilberto\",\"Tripping Daisy\",\"Los Fabulosos Cadillacs\",\"Average White Band\",\"David Bowie\",\"Musiq Soulchild\",\"Post Malone\",\"Yung Berg\",\"Alan Jackson\",\"The Who\",\"Blue Magic\",\"The Marketts\",\"Drake\",\"Fall Out Boy\",\"blackbear\",\"Enrique Iglesias\",\"The Temptations\",\"Lady Antebellum\",\"Kenny Chesney\",\"The Byrds\",\"Man√°\",\"Angie Stone\",\"La Ley\",\"J.J. Fad\",\"Tenth Avenue North\",\"Jesse L. Martin\",\"My Chemical Romance\",\"Luke Bryan\",\"Cobra Starship\",\"Joaquin Phoenix\",\"Meg Myers\",\"Mariah Carey\",\"The Kinks\",\"Jeremy Jordan\",\"Bon Jovi\",\"Texas Tornados\",\"Candlebox\",\"Sufjan Stevens\",\"Ludacris\",\"Phish\",\"George Strait\",\"Panic! At The Disco\",\"Post Malone\",\"Foster The People\",\"Tenth Avenue North\",\"Thomas Rhett\",\"Bronze Radio Return\",\"Janelle Mon√°e\",\"All Time Low\",\"Prince Royce\",\"Alkaline Trio\",\"O.T. Genasis\",\"Twenty One Pilots\",\"Lady Antebellum\",\"Shakira\",\"David Guetta\",\"Jodeci\",\"Ciara\",\"Halsey\",\"XXXTENTACION\",\"The Naked And Famous\",\"Tame Impala\",\"Lynyrd Skynyrd\",\"Michael Jackson\",\"Randy Newman\",\"J. Holiday\",\"The Doors\",\"Demi Lovato\",\"Eric Church\",\"Bad Company\",\"Thrice\",\"Mike Posner\",\"Rhett Akins\",\"ScHoolboy Q\",\"Travis Tritt\",\"Jason Aldean\",\"Florida Georgia Line\",\"Amos Lee\",\"Ciara\",\"The Wanted\",\"One Direction\",\"Matt Kennon\",\"Manafest\",\"Panic! At The Disco\",\"Tracie Thoms\",\"Jimmy Buffett\",\"Santana\",\"Travis Scott\",\"The Kinks\",\"Prince Royce\",\"Ty Dolla $ign\",\"Rancid\",\"Grand Funk Railroad\",\"Michael Bubl√©\",\"AC/DC\",\"Neil Young\",\"Ed Sheeran\",\"Tim McGraw\",\"Trentem√∏ller\",\"Tyler James Williams\",\"Kansas\",\"Hans Zimmer\",\"Tommy James &amp; The Shondells\",\"Tevin Campbell\",\"Alex Newell\",\"Travis Scott\",\"The Avett Brothers\",\"Phillip Phillips\",\"Alan Jackson\",\"The Monkees\",\"Hole\",\"Tone-Loc\",\"Boston\",\"Janet Jackson\",\"B.o.B\",\"Daddy Yankee\",\"Yescontainer\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Track Name<\\/th>\\n      <th>Artist<\\/th>\\n      <th>Key<\\/th>\\n      <th>Tempo<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"initComplete\":\"\\n      function(settings, json) {\\n        // Change text color of table headers and body\\n        $(this.api().table().body()).css({'color': 'white'});\\n        $(this.api().table().header()).css({'color': 'white'});\\n\\n        // Change text color of pagination buttons\\n        $('.dataTables_paginate').css({'color': 'white'});\\n        $('.dataTables_paginate a').css({'color': 'white'});\\n\\n        // Change text color of 'Show entries' dropdown and label\\n        $('.dataTables_length label').css({'color': 'white'});\\n        $('.dataTables_length select').css({'color': 'white', 'background-color': 'black'});\\n\\n        // Change text color of search box\\n        $('.dataTables_filter label').css({'color': 'white'});\\n        $('.dataTables_filter input').css({'color': 'white', 'background-color': 'black'});\\n\\n        // Change text color of info text ('Showing X to Y of Z entries')\\n        $('.dataTables_info').css({'color': 'white'});\\n      }\\n    \",\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[3,4]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"Track Name\",\"targets\":1},{\"name\":\"Artist\",\"targets\":2},{\"name\":\"Key\",\"targets\":3},{\"name\":\"Tempo\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"rowCallback\":\"function(row, data, displayNum, displayIndex, dataIndex) {\\nvar value=data[1]; $(this.api().cell(row, 1).node()).css({'color':'white'});\\nvar value=data[2]; $(this.api().cell(row, 2).node()).css({'color':'white'});\\nvar value=data[3]; $(this.api().cell(row, 3).node()).css({'color':'white'});\\nvar value=data[4]; $(this.api().cell(row, 4).node()).css({'color':'white'});\\n}\"}},\"evals\":[\"options.initComplete\",\"options.rowCallback\"],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n## üé§ Songs by Same Artists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the 2 artists from anchor songs\nartist1 <- inner_joined_data|>\n  filter(track_name == anchor1)|> select(artist_name)|>\n  head(1)\n\nartist2 <- inner_joined_data|>\n  filter(track_name == anchor2)|> select(artist_name)|>\n  head(1)\n\n# songs by same artists\nsame_artists <- inner_joined_data |>\n  filter(!(track_name %in% c(anchor1, anchor2))) |>\n  filter(artist_name %in% c(artist1, artist2)) |>\n  distinct(track_name, artist_name)\n```\n:::\n\n\n\nThis table displays all songs by the same artists who performed the selected anchor songs, excluding the anchor songs themselves. These tracks were identified by matching the artist names and filtering for unique song titles. This approach highlights additional songs that share stylistic elements with the anchors, making them strong candidates for inclusion in a cohesive playlist.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-13cff40272bf0b0ec744\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-13cff40272bf0b0ec744\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\"],[\"Piss On Your Grave\",\"H2O\",\"Antidote\",\"90210\",\"beibs in the trap\",\"Jocelyn Flores\",\"Fuck Love (feat. Trippie Redd)\",\"Everybody Dies In Their Nightmares\",\"Carry On\",\"Mamacita\",\"3500\",\"through the late night\",\"way back\",\"wonderful\",\"Revenge\",\"Oh My Dis Side\",\"Nightcrawler\",\"Depression &amp; Obsession\",\"the ends\",\"A-Team\",\"coordinate\",\"Save Me\",\"lose\",\"Off the Wall!\",\"outside\",\"Orlando\",\"Upper Echelon\",\"first take\",\"sdp interlude\",\"Dead Inside (Interlude)\",\"guidance\",\"Ayala (Outro)\"],[\"Travis Scott\",\"XXXTENTACION\",\"Travis Scott\",\"Travis Scott\",\"Travis Scott\",\"XXXTENTACION\",\"XXXTENTACION\",\"XXXTENTACION\",\"XXXTENTACION\",\"Travis Scott\",\"Travis Scott\",\"Travis Scott\",\"Travis Scott\",\"Travis Scott\",\"XXXTENTACION\",\"Travis Scott\",\"Travis Scott\",\"XXXTENTACION\",\"Travis Scott\",\"Travis Scott\",\"Travis Scott\",\"XXXTENTACION\",\"Travis Scott\",\"XXXTENTACION\",\"Travis Scott\",\"XXXTENTACION\",\"Travis Scott\",\"Travis Scott\",\"Travis Scott\",\"XXXTENTACION\",\"Travis Scott\",\"XXXTENTACION\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Track Name<\\/th>\\n      <th>Artist<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"initComplete\":\"\\n      function(settings, json) {\\n        // Change text color of table headers and body\\n        $(this.api().table().body()).css({'color': 'white'});\\n        $(this.api().table().header()).css({'color': 'white'});\\n\\n        // Change text color of pagination buttons\\n        $('.dataTables_paginate').css({'color': 'white'});\\n        $('.dataTables_paginate a').css({'color': 'white'});\\n\\n        // Change text color of 'Show entries' dropdown and label\\n        $('.dataTables_length label').css({'color': 'white'});\\n        $('.dataTables_length select').css({'color': 'white', 'background-color': 'black'});\\n\\n        // Change text color of search box\\n        $('.dataTables_filter label').css({'color': 'white'});\\n        $('.dataTables_filter input').css({'color': 'white', 'background-color': 'black'});\\n\\n        // Change text color of info text ('Showing X to Y of Z entries')\\n        $('.dataTables_info').css({'color': 'white'});\\n      }\\n    \",\"columnDefs\":[{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"Track Name\",\"targets\":1},{\"name\":\"Artist\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"rowCallback\":\"function(row, data, displayNum, displayIndex, dataIndex) {\\nvar value=data[1]; $(this.api().cell(row, 1).node()).css({'color':'white'});\\nvar value=data[2]; $(this.api().cell(row, 2).node()).css({'color':'white'});\\n}\"}},\"evals\":[\"options.initComplete\",\"options.rowCallback\"],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n## üéôÔ∏è Songs released in the same year with similar characteristics\n\nTo identify songs that resemble the anchor tracks in musical characteristics, we averaged the acousticness, danceability, instrumentalness, and energy of both anchor songs. We then filtered songs within ¬±25% of these average values and from the same release years. The resulting table shows songs that closely match the overall style of the selected anchors.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyear1<- inner_joined_data|>\n  filter(track_name  == anchor1)|>\n  select(year)|> head(1)\n\nyear2<- inner_joined_data|>\n  filter(track_name  == anchor2)|>\n  select(year)|> head(1)\n\n# update the anchor_stats\nanchor1_stats<- inner_joined_data|>\n  filter(track_name == anchor1) |>\n  summarize(\n    acousticness = acousticness[1],\n    danceability = danceability[1],\n    liveness = liveness[1],\n    energy = energy[1]\n  )\n\nanchor2_stats<- inner_joined_data|>\n  filter(track_name == anchor2) |>\n  summarize(\n    acousticness = acousticness[1],\n    danceability = danceability[1],\n    liveness = liveness[1],\n    energy = energy[1]\n  )\n\navrg_stats <- bind_rows(anchor1_stats, anchor2_stats) |>\n  summarize(\n    acousticness = mean(acousticness, na.rm = TRUE),\n    danceability = mean(danceability, na.rm = TRUE),\n    liveness = mean(liveness, na.rm = TRUE),\n    energy = mean(energy, na.rm = TRUE))\n\nsimilar_char <- inner_joined_data|>\n  filter(!(track_name %in% c(anchor1, anchor2)))|>\n  filter( year %in% c(year1, year2))|>\n  filter(\n    abs(acousticness - avrg_stats$acousticness) <= 0.25 * avrg_stats$acousticness,\n    abs(danceability - avrg_stats$danceability) <= 0.25 * avrg_stats$danceability,\n    abs(liveness - avrg_stats$liveness) <= 0.25 * avrg_stats$liveness,\n    abs(energy - avrg_stats$energy) <= 0.25 * avrg_stats$energy\n  )|>\n  select(everything())|>\n  distinct(track_name, .keep_all = TRUE)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-db8ab9dbc32cdef97c87\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-db8ab9dbc32cdef97c87\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\"],[\"0 Sentimientos (Remix) [feat. Noriel, Darkiel, Lyan, Messiah &amp; Baby Rasta]\",\"First Time\",\"Gravity\",\"Kiss Goodbye\",\"Me Enamor√©\",\"Kitchen\",\"Memo\",\"You Can't Hide\",\"Deadz (feat. 2 Chainz)\",\"How To Love (feat. Sofia Reyes)\",\"Reminder - Remix\",\"Stay Together\",\"Somebody Else\",\"No Problem (feat. Lil Wayne &amp; 2 Chainz)\",\"Black Beatles\",\"Pretty Girl - Cheat Codes X CADE Remix\",\"Buttercup\",\"Youth\",\"Got You On My Mind\",\"Jump Out The Window\",\"Star Of The Show\",\"FEEL.\",\"Oceans Away\",\"T√∫ Foto\",\"THat Part - Black Hippy Remix\",\"Sincerely, Me\",\"LUST.\"],[\"Jonz\",\"Kygo\",\"YoungBoy Never Broke Again\",\"Cody Johnson\",\"Shakira\",\"Kid Cudi\",\"Young Thug\",\"Ck9c\",\"Migos\",\"Cash Cash\",\"The Weeknd\",\"Noah Cyrus\",\"The 1975\",\"Chance The Rapper\",\"Rae Sremmurd\",\"Maggie Lindemann\",\"Hippo Campus\",\"Glass Animals\",\"NF\",\"Big Sean\",\"Thomas Rhett\",\"Kendrick Lamar\",\"A R I Z O N A\",\"Ozuna\",\"ScHoolboy Q\",\"Mike Faist\",\"Kendrick Lamar\"],[0.155,0.197,0.182,0.151,0.193,0.137,0.151,0.151,0.162,0.148,0.153,0.174,0.195,0.156,0.142,0.15,0.199,0.129,0.171,0.136,0.142,0.137,0.13,0.164,0.139,0.168,0.193],[0.894,0.633,0.673,0.617,0.74,0.725,0.823,0.742,0.862,0.673,0.751,0.659,0.61,0.652,0.794,0.703,0.623,0.648,0.605,0.747,0.695,0.746,0.617,0.748,0.892,0.677,0.678],[0.154,0.099,0.119,0.107,0.09279999999999999,0.133,0.122,0.125,0.128,0.141,0.104,0.095,0.153,0.123,0.128,0.104,0.126,0.112,0.14,0.131,0.131,0.139,0.0929,0.103,0.114,0.103,0.104],[0.721,0.592,0.619,0.652,0.879,0.801,0.5639999999999999,0.552,0.785,0.894,0.654,0.589,0.788,0.795,0.632,0.868,0.763,0.718,0.5600000000000001,0.704,0.641,0.798,0.642,0.5649999999999999,0.548,0.731,0.5620000000000001],[\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Popular\",\"Popular\",\"Popular\",\"Very Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\"],[2016,2017,2016,2016,2017,2016,2016,2017,2017,2016,2017,2017,2016,2016,2016,2017,2017,2016,2016,2017,2016,2017,2017,2017,2016,2017,2017]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Track Name<\\/th>\\n      <th>Artist<\\/th>\\n      <th>Acousticness<\\/th>\\n      <th>danceability<\\/th>\\n      <th>Liveness<\\/th>\\n      <th>Energy<\\/th>\\n      <th>Popularity<\\/th>\\n      <th>Year<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"initComplete\":\"\\n      function(settings, json) {\\n        // Change text color of table headers and body\\n        $(this.api().table().body()).css({'color': 'white'});\\n        $(this.api().table().header()).css({'color': 'white'});\\n\\n        // Change text color of pagination buttons\\n        $('.dataTables_paginate').css({'color': 'white'});\\n        $('.dataTables_paginate a').css({'color': 'white'});\\n\\n        // Change text color of 'Show entries' dropdown and label\\n        $('.dataTables_length label').css({'color': 'white'});\\n        $('.dataTables_length select').css({'color': 'white', 'background-color': 'black'});\\n\\n        // Change text color of search box\\n        $('.dataTables_filter label').css({'color': 'white'});\\n        $('.dataTables_filter input').css({'color': 'white', 'background-color': 'black'});\\n\\n        // Change text color of info text ('Showing X to Y of Z entries')\\n        $('.dataTables_info').css({'color': 'white'});\\n      }\\n    \",\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[3,4,5,6,8]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"Track Name\",\"targets\":1},{\"name\":\"Artist\",\"targets\":2},{\"name\":\"Acousticness\",\"targets\":3},{\"name\":\"danceability\",\"targets\":4},{\"name\":\"Liveness\",\"targets\":5},{\"name\":\"Energy\",\"targets\":6},{\"name\":\"Popularity\",\"targets\":7},{\"name\":\"Year\",\"targets\":8}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"rowCallback\":\"function(row, data, displayNum, displayIndex, dataIndex) {\\n}\"}},\"evals\":[\"options.initComplete\",\"options.rowCallback\"],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n## üîä Finding Related Songs {#Finding-Related-Songs}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Getting relevant tracks from heuristics\nrelevant_tracks <- bind_rows(\n  co_occurring_songs|> select(track_name),\n  same_artists|> select(track_name),\n  similar_songs |> select(track_name),\n  similar_char|> select(track_name)\n  ) |>\n    distinct()\n\n# non_popular songs\nplaylist_nonpopular <- inner_joined_data |>\n  filter(name %in% relevant_tracks$track_name) |>\n  filter(popularity_level == \"Not Popular\")|>\n  select(name, artist_name, popularity_level)|>\n  distinct()\n\n#popular songs\nplaylist_popular <- inner_joined_data |>\n  filter(name %in% relevant_tracks$track_name) |>\n  filter(popularity_level == \"Very Popular\" |\n           popularity_level == \"Popular\")|>\n  select(name, artist_name, popularity_level)|>\n  distinct()\n\n# getting 8 Non popular songs, 6 popular songs, 6 Very popular songs\n\nfin_playlist <- bind_rows(\n  playlist_nonpopular|> sample_n(8),\n  playlist_popular|> filter(popularity_level == \"Popular\")|>\n    sample_n(6),\n  playlist_popular|> filter(popularity_level == \"Very Popular\")|>\n    sample_n(6))\n```\n:::\n\n\n\n\nTo build a well-rounded and personalized playlist, we began by identifying **relevant tracks** using several heuristic methods based on my two anchor songs:\n\n- **Co-occurring songs** that frequently appear in the same playlists.\n- **Tracks by the same artists** as the anchor songs.\n- **Songs with a similar musical key and tempo**, which would allow for smoother DJ transitions.\n- **Songs with similar audio characteristics**, such as acousticness, danceability, energy, and liveness.\n\nThese heuristics were combined into a single list of `relevant_tracks`, ensuring only distinct track names were included.\n\nNext, I categorized the songs by **popularity level**:\n- **Not Popular**\n- **Popular**\n- **Very Popular**\n\nFinally, I curated a **final playlist** by sampling:\n\n- üé∂ 8 non-popular songs  \n- üé∂ 6 popular songs  \n- üé∂ 6 very popular songs  \n\nThis approach creates a balanced and diverse playlist, mixing well-known hits with lesser-known tracks that share musical and stylistic traits with the anchor songs.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-fc2115fcf4a792cf3456\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-fc2115fcf4a792cf3456\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\"],[\"Money Mitch\",\"Real Hitta (feat. Kodak Black)\",\"Stainless\",\"Sorry Not Sorry\",\"9 Piece\",\"Love Yourz\",\"Gold\",\"Floats My Boat\",\"Fuck It up (feat. Yg)\",\"Young And Beautiful\",\"through the late night\",\"No Problem (feat. Lil Wayne &amp; 2 Chainz)\",\"Tunnel Vision\",\"Plain Jane\",\"Losin Control\",\"The Real Slim Shady\",\"Drowning (feat. Kodak Black)\",\"Without Me\",\"Waves - Robin Schulz Radio Edit\",\"Killing In The Name\"],[\"Lil Uzi Vert\",\"Plies\",\"Logic\",\"Bryson Tiller\",\"Rick Ross\",\"J. Cole\",\"Chet Faker\",\"Aer\",\"Kamaiyah\",\"Lana Del Rey\",\"Travis Scott\",\"Chance The Rapper\",\"Kodak Black\",\"A$AP Ferg\",\"Russ\",\"Eminem\",\"A Boogie Wit da Hoodie\",\"Eminem\",\"Mr. Probz\",\"Rage Against The Machine\"],[\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Popular\",\"Popular\",\"Popular\",\"Popular\",\"Popular\",\"Popular\",\"Very Popular\",\"Very Popular\",\"Very Popular\",\"Very Popular\",\"Very Popular\",\"Very Popular\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>name<\\/th>\\n      <th>artist_name<\\/th>\\n      <th>popularity_level<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"initComplete\":\"\\n      function(settings, json) {\\n        // Change text color of table headers and body\\n        $(this.api().table().body()).css({'color': 'white'});\\n        $(this.api().table().header()).css({'color': 'white'});\\n\\n        // Change text color of pagination buttons\\n        $('.dataTables_paginate').css({'color': 'white'});\\n        $('.dataTables_paginate a').css({'color': 'white'});\\n\\n        // Change text color of 'Show entries' dropdown and label\\n        $('.dataTables_length label').css({'color': 'white'});\\n        $('.dataTables_length select').css({'color': 'white', 'background-color': 'black'});\\n\\n        // Change text color of search box\\n        $('.dataTables_filter label').css({'color': 'white'});\\n        $('.dataTables_filter input').css({'color': 'white', 'background-color': 'black'});\\n\\n        // Change text color of info text ('Showing X to Y of Z entries')\\n        $('.dataTables_info').css({'color': 'white'});\\n      }\\n    \",\"columnDefs\":[{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"name\",\"targets\":1},{\"name\":\"artist_name\",\"targets\":2},{\"name\":\"popularity_level\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"rowCallback\":\"function(row, data, displayNum, displayIndex, dataIndex) {\\n}\"}},\"evals\":[\"options.initComplete\",\"options.rowCallback\"],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n## üéß Final Playlist  Based on Heuristics and Popularity {#final-playlist}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfin_playlist_12 <- bind_rows(\n  playlist_nonpopular |> sample_n(4),\n  playlist_popular |> filter(popularity_level == \"Popular\") |> sample_n(4),\n  playlist_popular |> filter(popularity_level == \"Very Popular\") |> sample_n(4)\n)\n\n# audio features for visualization\nplaylist_features <- inner_join(fin_playlist_12, inner_joined_data, \n                                by = c(\"name\" = \"name\", \"artist_name\" = \"artist_name\")) |>\n  distinct(name, artist_name, acousticness, energy, danceability, tempo, popularity) |>\n  mutate(order = row_number())\n\n# Plotting evolution\nplaylist_features_long <- playlist_features |>\n  select(order, name, acousticness, energy, danceability, tempo) |>\n  pivot_longer(-c(order, name), names_to = \"feature\", values_to = \"value\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-b1cbd75f18de5c7e58f5\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b1cbd75f18de5c7e58f5\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],[\"Trap Niggas\",\"I Just Want It All\",\"No Sleep\",\"Deadz (feat. 2 Chainz)\",\"Sunset Lover\",\"Feeling Whitney\",\"Caroline\",\"Slippery (feat. Gucci Mane)\",\"That's What I Like\",\"Hurricane\",\"Story of My Life\",\"PILLOWTALK\"],[\"Future\",\"Kid Ink\",\"Wiz Khalifa\",\"Migos\",\"Petit Biscuit\",\"Post Malone\",\"Amin√©\",\"Migos\",\"Bruno Mars\",\"Luke Combs\",\"One Direction\",\"ZAYN\"],[\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Not Popular\",\"Popular\",\"Popular\",\"Popular\",\"Popular\",\"Very Popular\",\"Very Popular\",\"Very Popular\",\"Very Popular\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>name<\\/th>\\n      <th>artist_name<\\/th>\\n      <th>popularity_level<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":12,\"initComplete\":\"\\n      function(settings, json) {\\n        // Change text color of table headers and body\\n        $(this.api().table().body()).css({'color': 'white'});\\n        $(this.api().table().header()).css({'color': 'white'});\\n\\n        // Change text color of pagination buttons\\n        $('.dataTables_paginate').css({'color': 'white'});\\n        $('.dataTables_paginate a').css({'color': 'white'});\\n\\n        // Change text color of 'Show entries' dropdown and label\\n        $('.dataTables_length label').css({'color': 'white'});\\n        $('.dataTables_length select').css({'color': 'white', 'background-color': 'black'});\\n\\n        // Change text color of search box\\n        $('.dataTables_filter label').css({'color': 'white'});\\n        $('.dataTables_filter input').css({'color': 'white', 'background-color': 'black'});\\n\\n        // Change text color of info text ('Showing X to Y of Z entries')\\n        $('.dataTables_info').css({'color': 'white'});\\n      }\\n    \",\"columnDefs\":[{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"name\",\"targets\":1},{\"name\":\"artist_name\",\"targets\":2},{\"name\":\"popularity_level\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,12,25,50,100],\"rowCallback\":\"function(row, data, displayNum, displayIndex, dataIndex) {\\n}\"}},\"evals\":[\"options.initComplete\",\"options.rowCallback\"],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n## üìä Analysis of Musical Structure\n\nTo understand the sonic journey of my playlist \"Pulse & Echo\", I analyzed the evolution of key audio features provided by Spotify. These features include:\n\n- Acousticness: Likelihood that a track is acoustic.\n\n- Energy: A measure of intensity and activity (e.g., fast, loud, noisy).\n\n- Danceability: How suitable a track is for dancing based on tempo, rhythm stability, and beat strength.\n\n- Tempo: The overall speed of the song (measured in BPM).\n\nThe line chart below displays how these metrics change across the 12 songs in the playlist, following the track order:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot 1: Acousticness, Energy, Danceability\nplot1 <- playlist_features|>\n  select(name, acousticness, energy, danceability) |>\n  pivot_longer(-name, names_to = \"Feature\", values_to = \"Value\") |>\n  mutate(name = factor(name, levels = playlist_features$name)) |>\n  ggplot(aes(x = name, y = Value, color = Feature, group = Feature)) +\n  geom_line(size = 1.2) +\n  geom_point(size = 2) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Playlist Feature Progression\",\n       y = \"Value (0 to 1)\",\n       x = \"Track Name\",\n       color = \"Feature\")\n\n# Plot 2: Tempo\nplot2 <- playlist_features |>\n  ggplot(aes(x = factor(name, levels = playlist_features$name), y = tempo)) +\n  geom_line(group = 1, color = \"steelblue\", size = 1.2) +\n  geom_point(color = \"steelblue\", size = 2) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Tempo Progression\",\n       y = \"Tempo (BPM)\",\n       x = \"Track Name\")\nplot1 / plot2\n```\n\n::: {.cell-output-display}\n![](mp03_files/figure-html/unnamed-chunk-43-1.png){width=960}\n:::\n:::",
    "supporting": [
      "mp03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}